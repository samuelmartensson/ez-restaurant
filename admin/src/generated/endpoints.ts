/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * backend
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import { authorizedFetch } from "../authorized-fetch";
export type PostPublicContactParams = {
  key: string;
};

export type GetPublicGetCustomerMenuParams = {
  Key: string;
  Language: string;
  cache?: boolean;
};

export type GetPublicGetCustomerConfigParams = {
  Key: string;
  Language: string;
  cache?: boolean;
};

export type GetPublicGetCustomerTranslationsParams = {
  Key: string;
  Language: string;
};

export type GetPublicAboutParams = {
  Key: string;
  Language: string;
};

export type GetPublicGetCustomerConfigMetaParams = {
  Key: string;
  Language: string;
};

export type PostOpeningHourParams = {
  Key: string;
  Language: string;
};

export type GetOpeningHourParams = {
  Key: string;
  Language: string;
};

export type PutNewsArticleIdAssetsBody = {
  Image?: Blob;
  removedAssets?: string[];
};

export type PutNewsArticleIdAssetsParams = {
  Key: string;
  Language: string;
};

export type PutNewsArticleIdParams = {
  Key: string;
  Language: string;
};

export type DeleteNewsArticleIdParams = {
  Key: string;
  Language: string;
};

export type GetNewsArticleId200 = { [key: string]: NewsArticleResponse };

export type GetNewsArticleIdParams = {
  Key: string;
  Language: string;
};

export type PostNewsArticleParams = {
  Key: string;
  Language: string;
};

export type GetNewsArticleParams = {
  Key: string;
  Language: string;
};

export type PostMenuCategoryOrderParams = {
  key: string;
};

export type DeleteMenuCategoryParams = {
  id?: number;
  key: string;
};

export type PostMenuCategoryParams = {
  Key: string;
  Language: string;
};

export type PostMenuItemsBody = {
  files?: Blob[];
  menuItemsJson?: string;
};

export type PostMenuItemsParams = {
  Key: string;
  Language: string;
};

export type PostHeroAssetsBody = {
  Image?: Blob;
  removedAssets?: string[];
};

export type PostHeroAssetsParams = {
  Key: string;
  Language: string;
};

export type PostHeroParams = {
  key: string;
};

export type GetHero200 = { [key: string]: HeroResponse };

export type GetHeroParams = {
  Key: string;
  Language: string;
};

export type DeleteGalleryParams = {
  id?: number;
  Key: string;
  Language: string;
};

export type PostGalleryBody = {
  Images?: Blob[];
};

export type PostGalleryParams = {
  Key: string;
  Language: string;
};

export type GetCustomerAnalyticsParams = {
  key: string;
};

export type DeleteCustomerDomainParams = {
  key: string;
};

export type PostCustomerDomainParams = {
  key: string;
  domainName?: string;
};

export type PostCustomerLanguagesBody = {
  DefaultLanguage?: string;
  Languages?: string[];
};

export type PostCustomerLanguagesParams = {
  Key: string;
  Language: string;
};

export type PostCustomerSiteConfigurationAssetsBody = {
  Font?: Blob;
  Logo?: Blob;
};

export type PostCustomerSiteConfigurationAssetsParams = {
  Key: string;
  Language: string;
};

export type PostCustomerSiteConfigurationBody = {
  Adress?: string;
  ContactFormVisible?: boolean;
  Currency?: string;
  Email?: string;
  FacebookUrl?: string;
  Font?: string;
  InstagramUrl?: string;
  Logo?: string;
  MapUrl?: string;
  Phone?: string;
  Theme?: string;
  ThemeColorConfig?: string;
  TiktokUrl?: string;
};

export type PostCustomerSiteConfigurationParams = {
  Key: string;
  Language: string;
};

export type DeleteCustomerConfigParams = {
  key: string;
};

export type PostAboutAssetsBody = {
  Image?: Blob;
  removedAssets?: string[];
};

export type PostAboutAssetsParams = {
  Key: string;
  Language: string;
};

export type PostAboutParams = {
  Key: string;
  Language: string;
};

export type GetAbout200 = { [key: string]: AboutResponse };

export type GetAboutParams = {
  Key: string;
  Language: string;
};

export interface UploadHeroLocalizedFields {
  /** @nullable */
  siteMetaTitle?: string | null;
  /** @nullable */
  siteName?: string | null;
}

export type UploadHeroRequestLocalizedFields = {
  [key: string]: UploadHeroLocalizedFields;
};

export interface UploadHeroRequest {
  localizedFields?: UploadHeroRequestLocalizedFields;
  /** @nullable */
  orderUrl?: string | null;
}

export interface UploadAboutLocalizedFields {
  /** @nullable */
  description?: string | null;
}

export type UploadAboutRequestLocalizedFields = {
  [key: string]: UploadAboutLocalizedFields;
};

export interface UploadAboutRequest {
  localizedFields?: UploadAboutRequestLocalizedFields;
}

export type SubscriptionState =
  (typeof SubscriptionState)[keyof typeof SubscriptionState];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SubscriptionState = {
  NUMBER_0: 0,
  NUMBER_1: 1,
} as const;

export interface SiteTranslationsResponse {
  aboutTitle?: string;
  allRightsReserved?: string;
  closed?: string;
  contactUs?: string;
  friday?: string;
  gallery?: string;
  menu?: string;
  monday?: string;
  news?: string;
  openHours?: string;
  openHoursCta?: string;
  openHoursToday?: string;
  orderNow?: string;
  readMore?: string;
  saturday?: string;
  sunday?: string;
  thursday?: string;
  tuesday?: string;
  wednesday?: string;
}

export interface SiteSectionHeroResponse {
  heroImage?: string;
  orderUrl?: string;
  siteMetaTitle?: string;
  siteName?: string;
}

export interface SiteSectionGalleryResponse {
  id?: number;
  image?: string;
}

export interface SiteSectionAboutResponse {
  aboutTitle?: string;
  description?: string;
  image?: string;
}

export interface SectionsResponse {
  about?: SiteSectionAboutResponse;
  gallery?: SiteSectionGalleryResponse[];
  hero?: SiteSectionHeroResponse;
  newsArticles?: NewsArticleResponse[];
}

export interface SectionVisibilityResponse {
  contactFormVisible?: boolean;
}

export interface OpeningHourResponse {
  closeTime?: string;
  day?: CustomDayOfWeek;
  id?: number;
  isClosed?: boolean;
  /** @nullable */
  label?: string | null;
  openTime?: string;
}

export interface NewsArticleResponse {
  content?: string;
  date?: string;
  id?: number;
  /** @nullable */
  image?: string | null;
  published?: boolean;
  title?: string;
  updatedAt?: string;
}

export interface MenuItemResponse {
  categoryId: number;
  /** @minLength 1 */
  description: string;
  id: number;
  /** @nullable */
  image?: string | null;
  /** @minLength 1 */
  name: string;
  order: number;
  price: number;
  /** @nullable */
  tags?: string | null;
}

export interface MenuCategoryResponse {
  /** @minLength 1 */
  description: string;
  id: number;
  /** @minLength 1 */
  name: string;
  order: number;
}

export interface MenuResponse {
  categories: MenuCategoryResponse[];
  menuItems: MenuItemResponse[];
}

export interface HeroResponse {
  heroImage?: string;
  orderUrl?: string;
  siteMetaTitle?: string;
  siteName?: string;
}

export interface CustomerConfigTranslations {
  siteTranslations?: SiteTranslationsResponse;
}

export interface CustomerConfigResponse {
  /** @nullable */
  adress?: string | null;
  availableLanguages?: string[];
  currency?: string;
  /** @nullable */
  customDomain?: string | null;
  defaultLanguage?: string;
  domain?: string;
  /** @nullable */
  email?: string | null;
  /** @nullable */
  facebookUrl?: string | null;
  /** @nullable */
  font?: string | null;
  heroType?: number;
  /** @nullable */
  instagramUrl?: string | null;
  languages?: string[];
  logo?: string;
  /** @nullable */
  mapUrl?: string | null;
  openingHours?: OpeningHourResponse[];
  /** @nullable */
  phone?: string | null;
  sections?: SectionsResponse;
  sectionVisibility?: SectionVisibilityResponse;
  siteMetaTitle?: string;
  siteName?: string;
  siteTranslations?: SiteTranslationsResponse;
  theme?: string;
  /** @nullable */
  themeColorConfig?: string | null;
  /** @nullable */
  tiktokUrl?: string | null;
}

export interface CustomerResponse {
  cancelInfo?: CancelInfo;
  customerConfigs?: CustomerConfigResponse[];
  domain?: string;
  isFirstSignIn?: boolean;
  subscription?: SubscriptionState;
}

export interface CustomerConfigMetaResponse {
  currency?: string;
  defaultLanguage?: string;
  domain?: string;
  hasMenu?: boolean;
  /** @nullable */
  image?: string | null;
  languages?: string[];
  siteName?: string;
}

export type CustomDayOfWeek =
  (typeof CustomDayOfWeek)[keyof typeof CustomDayOfWeek];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CustomDayOfWeek = {
  NUMBER_0: 0,
  NUMBER_1: 1,
  NUMBER_2: 2,
  NUMBER_3: 3,
  NUMBER_4: 4,
  NUMBER_5: 5,
  NUMBER_6: 6,
  NUMBER_7: 7,
} as const;

export interface CreateConfigRequest {
  domain?: string;
}

export interface ContactRequest {
  description?: string;
  email?: string;
  name?: string;
}

export interface CancelInfo {
  isCanceled?: boolean;
  isExpired?: boolean;
  /** @nullable */
  periodEnd?: string | null;
}

export type AnalyticsResponsePreviousMenu = { [key: string]: string };

export type AnalyticsResponsePrevious = { [key: string]: string };

export type AnalyticsResponseCurrentMenu = { [key: string]: string };

export type AnalyticsResponseCurrent = { [key: string]: string };

export interface AnalyticsResponse {
  current?: AnalyticsResponseCurrent;
  currentMenu?: AnalyticsResponseCurrentMenu;
  previous?: AnalyticsResponsePrevious;
  previousMenu?: AnalyticsResponsePreviousMenu;
}

export interface AddOpeningHourRequest {
  closeTime?: string;
  id?: number;
  isClosed?: boolean;
  /** @nullable */
  label?: string | null;
  openTime?: string;
}

export interface AddNewsArticleLocalizedFields {
  content?: string;
  title?: string;
}

export type AddNewsArticleRequestLocalizedFields = {
  [key: string]: AddNewsArticleLocalizedFields;
};

export interface AddNewsArticleRequest {
  localizedFields?: AddNewsArticleRequestLocalizedFields;
  published?: boolean;
  removeImage?: boolean;
}

export interface AddCategoryRequest {
  /** @nullable */
  description?: string | null;
  id?: number;
  name?: string;
  /** @nullable */
  order?: number | null;
}

export interface AboutResponse {
  description?: string;
  image?: string;
}

export const getAbout = (params: GetAboutParams, signal?: AbortSignal) => {
  return authorizedFetch<GetAbout200>({
    url: `/About`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetAboutQueryKey = (params: GetAboutParams) => {
  return [`/About`, ...(params ? [params] : [])] as const;
};

export const getGetAboutQueryOptions = <
  TData = Awaited<ReturnType<typeof getAbout>>,
  TError = unknown,
>(
  params: GetAboutParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAbout>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAboutQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAbout>>> = ({
    signal,
  }) => getAbout(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAbout>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetAboutQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAbout>>
>;
export type GetAboutQueryError = unknown;

export function useGetAbout<
  TData = Awaited<ReturnType<typeof getAbout>>,
  TError = unknown,
>(
  params: GetAboutParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAbout>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAbout>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetAbout<
  TData = Awaited<ReturnType<typeof getAbout>>,
  TError = unknown,
>(
  params: GetAboutParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAbout>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAbout>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetAbout<
  TData = Awaited<ReturnType<typeof getAbout>>,
  TError = unknown,
>(
  params: GetAboutParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAbout>>, TError, TData>
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetAbout<
  TData = Awaited<ReturnType<typeof getAbout>>,
  TError = unknown,
>(
  params: GetAboutParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAbout>>, TError, TData>
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetAboutQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postAbout = (
  uploadAboutRequest: UploadAboutRequest,
  params: PostAboutParams,
  signal?: AbortSignal,
) => {
  return authorizedFetch<void>({
    url: `/About`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: uploadAboutRequest,
    params,
    signal,
  });
};

export const getPostAboutMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postAbout>>,
    TError,
    { data: UploadAboutRequest; params: PostAboutParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postAbout>>,
  TError,
  { data: UploadAboutRequest; params: PostAboutParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postAbout>>,
    { data: UploadAboutRequest; params: PostAboutParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return postAbout(data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostAboutMutationResult = NonNullable<
  Awaited<ReturnType<typeof postAbout>>
>;
export type PostAboutMutationBody = UploadAboutRequest;
export type PostAboutMutationError = unknown;

export const usePostAbout = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postAbout>>,
    TError,
    { data: UploadAboutRequest; params: PostAboutParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postAbout>>,
  TError,
  { data: UploadAboutRequest; params: PostAboutParams },
  TContext
> => {
  const mutationOptions = getPostAboutMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postAboutAssets = (
  postAboutAssetsBody: PostAboutAssetsBody,
  params: PostAboutAssetsParams,
  signal?: AbortSignal,
) => {
  const formData = new FormData();
  if (postAboutAssetsBody.Image !== undefined) {
    formData.append("Image", postAboutAssetsBody.Image);
  }
  if (postAboutAssetsBody.removedAssets !== undefined) {
    postAboutAssetsBody.removedAssets.forEach((value) =>
      formData.append("removedAssets", value),
    );
  }

  return authorizedFetch<void>({
    url: `/About/assets`,
    method: "POST",
    headers: { "Content-Type": "multipart/form-data" },
    data: formData,
    params,
    signal,
  });
};

export const getPostAboutAssetsMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postAboutAssets>>,
    TError,
    { data: PostAboutAssetsBody; params: PostAboutAssetsParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postAboutAssets>>,
  TError,
  { data: PostAboutAssetsBody; params: PostAboutAssetsParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postAboutAssets>>,
    { data: PostAboutAssetsBody; params: PostAboutAssetsParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return postAboutAssets(data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostAboutAssetsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postAboutAssets>>
>;
export type PostAboutAssetsMutationBody = PostAboutAssetsBody;
export type PostAboutAssetsMutationError = unknown;

export const usePostAboutAssets = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postAboutAssets>>,
    TError,
    { data: PostAboutAssetsBody; params: PostAboutAssetsParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postAboutAssets>>,
  TError,
  { data: PostAboutAssetsBody; params: PostAboutAssetsParams },
  TContext
> => {
  const mutationOptions = getPostAboutAssetsMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getCustomerCustomer = (signal?: AbortSignal) => {
  return authorizedFetch<CustomerResponse>({
    url: `/Customer/customer`,
    method: "GET",
    signal,
  });
};

export const getGetCustomerCustomerQueryKey = () => {
  return [`/Customer/customer`] as const;
};

export const getGetCustomerCustomerQueryOptions = <
  TData = Awaited<ReturnType<typeof getCustomerCustomer>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getCustomerCustomer>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCustomerCustomerQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getCustomerCustomer>>
  > = ({ signal }) => getCustomerCustomer(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCustomerCustomer>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetCustomerCustomerQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCustomerCustomer>>
>;
export type GetCustomerCustomerQueryError = unknown;

export function useGetCustomerCustomer<
  TData = Awaited<ReturnType<typeof getCustomerCustomer>>,
  TError = unknown,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getCustomerCustomer>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getCustomerCustomer>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetCustomerCustomer<
  TData = Awaited<ReturnType<typeof getCustomerCustomer>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getCustomerCustomer>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getCustomerCustomer>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetCustomerCustomer<
  TData = Awaited<ReturnType<typeof getCustomerCustomer>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getCustomerCustomer>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetCustomerCustomer<
  TData = Awaited<ReturnType<typeof getCustomerCustomer>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getCustomerCustomer>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetCustomerCustomerQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const putCustomerConfig = (createConfigRequest: CreateConfigRequest) => {
  return authorizedFetch<void>({
    url: `/Customer/config`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: createConfigRequest,
  });
};

export const getPutCustomerConfigMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putCustomerConfig>>,
    TError,
    { data: CreateConfigRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putCustomerConfig>>,
  TError,
  { data: CreateConfigRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putCustomerConfig>>,
    { data: CreateConfigRequest }
  > = (props) => {
    const { data } = props ?? {};

    return putCustomerConfig(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutCustomerConfigMutationResult = NonNullable<
  Awaited<ReturnType<typeof putCustomerConfig>>
>;
export type PutCustomerConfigMutationBody = CreateConfigRequest;
export type PutCustomerConfigMutationError = unknown;

export const usePutCustomerConfig = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putCustomerConfig>>,
    TError,
    { data: CreateConfigRequest },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putCustomerConfig>>,
  TError,
  { data: CreateConfigRequest },
  TContext
> => {
  const mutationOptions = getPutCustomerConfigMutationOptions(options);

  return useMutation(mutationOptions);
};

export const deleteCustomerConfig = (params: DeleteCustomerConfigParams) => {
  return authorizedFetch<void>({
    url: `/Customer/config`,
    method: "DELETE",
    params,
  });
};

export const getDeleteCustomerConfigMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteCustomerConfig>>,
    TError,
    { params: DeleteCustomerConfigParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteCustomerConfig>>,
  TError,
  { params: DeleteCustomerConfigParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteCustomerConfig>>,
    { params: DeleteCustomerConfigParams }
  > = (props) => {
    const { params } = props ?? {};

    return deleteCustomerConfig(params);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteCustomerConfigMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteCustomerConfig>>
>;

export type DeleteCustomerConfigMutationError = unknown;

export const useDeleteCustomerConfig = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteCustomerConfig>>,
    TError,
    { params: DeleteCustomerConfigParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteCustomerConfig>>,
  TError,
  { params: DeleteCustomerConfigParams },
  TContext
> => {
  const mutationOptions = getDeleteCustomerConfigMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postCustomerSiteConfiguration = (
  postCustomerSiteConfigurationBody: PostCustomerSiteConfigurationBody,
  params: PostCustomerSiteConfigurationParams,
  signal?: AbortSignal,
) => {
  const formData = new FormData();
  if (postCustomerSiteConfigurationBody.Theme !== undefined) {
    formData.append("Theme", postCustomerSiteConfigurationBody.Theme);
  }
  if (postCustomerSiteConfigurationBody.Currency !== undefined) {
    formData.append("Currency", postCustomerSiteConfigurationBody.Currency);
  }
  if (postCustomerSiteConfigurationBody.ContactFormVisible !== undefined) {
    formData.append(
      "ContactFormVisible",
      postCustomerSiteConfigurationBody.ContactFormVisible.toString(),
    );
  }
  if (postCustomerSiteConfigurationBody.Logo !== undefined) {
    formData.append("Logo", postCustomerSiteConfigurationBody.Logo);
  }
  if (postCustomerSiteConfigurationBody.Font !== undefined) {
    formData.append("Font", postCustomerSiteConfigurationBody.Font);
  }
  if (postCustomerSiteConfigurationBody.Adress !== undefined) {
    formData.append("Adress", postCustomerSiteConfigurationBody.Adress);
  }
  if (postCustomerSiteConfigurationBody.Phone !== undefined) {
    formData.append("Phone", postCustomerSiteConfigurationBody.Phone);
  }
  if (postCustomerSiteConfigurationBody.Email !== undefined) {
    formData.append("Email", postCustomerSiteConfigurationBody.Email);
  }
  if (postCustomerSiteConfigurationBody.InstagramUrl !== undefined) {
    formData.append(
      "InstagramUrl",
      postCustomerSiteConfigurationBody.InstagramUrl,
    );
  }
  if (postCustomerSiteConfigurationBody.TiktokUrl !== undefined) {
    formData.append("TiktokUrl", postCustomerSiteConfigurationBody.TiktokUrl);
  }
  if (postCustomerSiteConfigurationBody.FacebookUrl !== undefined) {
    formData.append(
      "FacebookUrl",
      postCustomerSiteConfigurationBody.FacebookUrl,
    );
  }
  if (postCustomerSiteConfigurationBody.MapUrl !== undefined) {
    formData.append("MapUrl", postCustomerSiteConfigurationBody.MapUrl);
  }
  if (postCustomerSiteConfigurationBody.ThemeColorConfig !== undefined) {
    formData.append(
      "ThemeColorConfig",
      postCustomerSiteConfigurationBody.ThemeColorConfig,
    );
  }

  return authorizedFetch<void>({
    url: `/Customer/site-configuration`,
    method: "POST",
    headers: { "Content-Type": "multipart/form-data" },
    data: formData,
    params,
    signal,
  });
};

export const getPostCustomerSiteConfigurationMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postCustomerSiteConfiguration>>,
    TError,
    {
      data: PostCustomerSiteConfigurationBody;
      params: PostCustomerSiteConfigurationParams;
    },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postCustomerSiteConfiguration>>,
  TError,
  {
    data: PostCustomerSiteConfigurationBody;
    params: PostCustomerSiteConfigurationParams;
  },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postCustomerSiteConfiguration>>,
    {
      data: PostCustomerSiteConfigurationBody;
      params: PostCustomerSiteConfigurationParams;
    }
  > = (props) => {
    const { data, params } = props ?? {};

    return postCustomerSiteConfiguration(data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostCustomerSiteConfigurationMutationResult = NonNullable<
  Awaited<ReturnType<typeof postCustomerSiteConfiguration>>
>;
export type PostCustomerSiteConfigurationMutationBody =
  PostCustomerSiteConfigurationBody;
export type PostCustomerSiteConfigurationMutationError = unknown;

export const usePostCustomerSiteConfiguration = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postCustomerSiteConfiguration>>,
    TError,
    {
      data: PostCustomerSiteConfigurationBody;
      params: PostCustomerSiteConfigurationParams;
    },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postCustomerSiteConfiguration>>,
  TError,
  {
    data: PostCustomerSiteConfigurationBody;
    params: PostCustomerSiteConfigurationParams;
  },
  TContext
> => {
  const mutationOptions =
    getPostCustomerSiteConfigurationMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postCustomerSiteConfigurationAssets = (
  postCustomerSiteConfigurationAssetsBody: PostCustomerSiteConfigurationAssetsBody,
  params: PostCustomerSiteConfigurationAssetsParams,
  signal?: AbortSignal,
) => {
  const formData = new FormData();
  if (postCustomerSiteConfigurationAssetsBody.Logo !== undefined) {
    formData.append("Logo", postCustomerSiteConfigurationAssetsBody.Logo);
  }
  if (postCustomerSiteConfigurationAssetsBody.Font !== undefined) {
    formData.append("Font", postCustomerSiteConfigurationAssetsBody.Font);
  }

  return authorizedFetch<void>({
    url: `/Customer/site-configuration-assets`,
    method: "POST",
    headers: { "Content-Type": "multipart/form-data" },
    data: formData,
    params,
    signal,
  });
};

export const getPostCustomerSiteConfigurationAssetsMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postCustomerSiteConfigurationAssets>>,
    TError,
    {
      data: PostCustomerSiteConfigurationAssetsBody;
      params: PostCustomerSiteConfigurationAssetsParams;
    },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postCustomerSiteConfigurationAssets>>,
  TError,
  {
    data: PostCustomerSiteConfigurationAssetsBody;
    params: PostCustomerSiteConfigurationAssetsParams;
  },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postCustomerSiteConfigurationAssets>>,
    {
      data: PostCustomerSiteConfigurationAssetsBody;
      params: PostCustomerSiteConfigurationAssetsParams;
    }
  > = (props) => {
    const { data, params } = props ?? {};

    return postCustomerSiteConfigurationAssets(data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostCustomerSiteConfigurationAssetsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postCustomerSiteConfigurationAssets>>
>;
export type PostCustomerSiteConfigurationAssetsMutationBody =
  PostCustomerSiteConfigurationAssetsBody;
export type PostCustomerSiteConfigurationAssetsMutationError = unknown;

export const usePostCustomerSiteConfigurationAssets = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postCustomerSiteConfigurationAssets>>,
    TError,
    {
      data: PostCustomerSiteConfigurationAssetsBody;
      params: PostCustomerSiteConfigurationAssetsParams;
    },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postCustomerSiteConfigurationAssets>>,
  TError,
  {
    data: PostCustomerSiteConfigurationAssetsBody;
    params: PostCustomerSiteConfigurationAssetsParams;
  },
  TContext
> => {
  const mutationOptions =
    getPostCustomerSiteConfigurationAssetsMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postCustomerLanguages = (
  postCustomerLanguagesBody: PostCustomerLanguagesBody,
  params: PostCustomerLanguagesParams,
  signal?: AbortSignal,
) => {
  const formData = new FormData();
  if (postCustomerLanguagesBody.Languages !== undefined) {
    postCustomerLanguagesBody.Languages.forEach((value) =>
      formData.append("Languages", value),
    );
  }
  if (postCustomerLanguagesBody.DefaultLanguage !== undefined) {
    formData.append(
      "DefaultLanguage",
      postCustomerLanguagesBody.DefaultLanguage,
    );
  }

  return authorizedFetch<void>({
    url: `/Customer/languages`,
    method: "POST",
    headers: { "Content-Type": "multipart/form-data" },
    data: formData,
    params,
    signal,
  });
};

export const getPostCustomerLanguagesMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postCustomerLanguages>>,
    TError,
    { data: PostCustomerLanguagesBody; params: PostCustomerLanguagesParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postCustomerLanguages>>,
  TError,
  { data: PostCustomerLanguagesBody; params: PostCustomerLanguagesParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postCustomerLanguages>>,
    { data: PostCustomerLanguagesBody; params: PostCustomerLanguagesParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return postCustomerLanguages(data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostCustomerLanguagesMutationResult = NonNullable<
  Awaited<ReturnType<typeof postCustomerLanguages>>
>;
export type PostCustomerLanguagesMutationBody = PostCustomerLanguagesBody;
export type PostCustomerLanguagesMutationError = unknown;

export const usePostCustomerLanguages = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postCustomerLanguages>>,
    TError,
    { data: PostCustomerLanguagesBody; params: PostCustomerLanguagesParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postCustomerLanguages>>,
  TError,
  { data: PostCustomerLanguagesBody; params: PostCustomerLanguagesParams },
  TContext
> => {
  const mutationOptions = getPostCustomerLanguagesMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postCustomerDomain = (
  params: PostCustomerDomainParams,
  signal?: AbortSignal,
) => {
  return authorizedFetch<void>({
    url: `/Customer/domain`,
    method: "POST",
    params,
    signal,
  });
};

export const getPostCustomerDomainMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postCustomerDomain>>,
    TError,
    { params: PostCustomerDomainParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postCustomerDomain>>,
  TError,
  { params: PostCustomerDomainParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postCustomerDomain>>,
    { params: PostCustomerDomainParams }
  > = (props) => {
    const { params } = props ?? {};

    return postCustomerDomain(params);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostCustomerDomainMutationResult = NonNullable<
  Awaited<ReturnType<typeof postCustomerDomain>>
>;

export type PostCustomerDomainMutationError = unknown;

export const usePostCustomerDomain = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postCustomerDomain>>,
    TError,
    { params: PostCustomerDomainParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postCustomerDomain>>,
  TError,
  { params: PostCustomerDomainParams },
  TContext
> => {
  const mutationOptions = getPostCustomerDomainMutationOptions(options);

  return useMutation(mutationOptions);
};

export const deleteCustomerDomain = (params: DeleteCustomerDomainParams) => {
  return authorizedFetch<void>({
    url: `/Customer/domain`,
    method: "DELETE",
    params,
  });
};

export const getDeleteCustomerDomainMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteCustomerDomain>>,
    TError,
    { params: DeleteCustomerDomainParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteCustomerDomain>>,
  TError,
  { params: DeleteCustomerDomainParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteCustomerDomain>>,
    { params: DeleteCustomerDomainParams }
  > = (props) => {
    const { params } = props ?? {};

    return deleteCustomerDomain(params);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteCustomerDomainMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteCustomerDomain>>
>;

export type DeleteCustomerDomainMutationError = unknown;

export const useDeleteCustomerDomain = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteCustomerDomain>>,
    TError,
    { params: DeleteCustomerDomainParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteCustomerDomain>>,
  TError,
  { params: DeleteCustomerDomainParams },
  TContext
> => {
  const mutationOptions = getDeleteCustomerDomainMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getCustomerAnalytics = (
  params: GetCustomerAnalyticsParams,
  signal?: AbortSignal,
) => {
  return authorizedFetch<AnalyticsResponse>({
    url: `/Customer/analytics`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetCustomerAnalyticsQueryKey = (
  params: GetCustomerAnalyticsParams,
) => {
  return [`/Customer/analytics`, ...(params ? [params] : [])] as const;
};

export const getGetCustomerAnalyticsQueryOptions = <
  TData = Awaited<ReturnType<typeof getCustomerAnalytics>>,
  TError = unknown,
>(
  params: GetCustomerAnalyticsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCustomerAnalytics>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetCustomerAnalyticsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getCustomerAnalytics>>
  > = ({ signal }) => getCustomerAnalytics(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCustomerAnalytics>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetCustomerAnalyticsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCustomerAnalytics>>
>;
export type GetCustomerAnalyticsQueryError = unknown;

export function useGetCustomerAnalytics<
  TData = Awaited<ReturnType<typeof getCustomerAnalytics>>,
  TError = unknown,
>(
  params: GetCustomerAnalyticsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCustomerAnalytics>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCustomerAnalytics>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetCustomerAnalytics<
  TData = Awaited<ReturnType<typeof getCustomerAnalytics>>,
  TError = unknown,
>(
  params: GetCustomerAnalyticsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCustomerAnalytics>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCustomerAnalytics>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetCustomerAnalytics<
  TData = Awaited<ReturnType<typeof getCustomerAnalytics>>,
  TError = unknown,
>(
  params: GetCustomerAnalyticsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCustomerAnalytics>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetCustomerAnalytics<
  TData = Awaited<ReturnType<typeof getCustomerAnalytics>>,
  TError = unknown,
>(
  params: GetCustomerAnalyticsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCustomerAnalytics>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetCustomerAnalyticsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postGallery = (
  postGalleryBody: PostGalleryBody,
  params: PostGalleryParams,
  signal?: AbortSignal,
) => {
  const formData = new FormData();
  if (postGalleryBody.Images !== undefined) {
    postGalleryBody.Images.forEach((value) => formData.append("Images", value));
  }

  return authorizedFetch<void>({
    url: `/Gallery`,
    method: "POST",
    headers: { "Content-Type": "multipart/form-data" },
    data: formData,
    params,
    signal,
  });
};

export const getPostGalleryMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postGallery>>,
    TError,
    { data: PostGalleryBody; params: PostGalleryParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postGallery>>,
  TError,
  { data: PostGalleryBody; params: PostGalleryParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postGallery>>,
    { data: PostGalleryBody; params: PostGalleryParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return postGallery(data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostGalleryMutationResult = NonNullable<
  Awaited<ReturnType<typeof postGallery>>
>;
export type PostGalleryMutationBody = PostGalleryBody;
export type PostGalleryMutationError = unknown;

export const usePostGallery = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postGallery>>,
    TError,
    { data: PostGalleryBody; params: PostGalleryParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postGallery>>,
  TError,
  { data: PostGalleryBody; params: PostGalleryParams },
  TContext
> => {
  const mutationOptions = getPostGalleryMutationOptions(options);

  return useMutation(mutationOptions);
};

export const deleteGallery = (params: DeleteGalleryParams) => {
  return authorizedFetch<void>({ url: `/Gallery`, method: "DELETE", params });
};

export const getDeleteGalleryMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteGallery>>,
    TError,
    { params: DeleteGalleryParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteGallery>>,
  TError,
  { params: DeleteGalleryParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteGallery>>,
    { params: DeleteGalleryParams }
  > = (props) => {
    const { params } = props ?? {};

    return deleteGallery(params);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteGalleryMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteGallery>>
>;

export type DeleteGalleryMutationError = unknown;

export const useDeleteGallery = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteGallery>>,
    TError,
    { params: DeleteGalleryParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteGallery>>,
  TError,
  { params: DeleteGalleryParams },
  TContext
> => {
  const mutationOptions = getDeleteGalleryMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getHero = (params: GetHeroParams, signal?: AbortSignal) => {
  return authorizedFetch<GetHero200>({
    url: `/Hero`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetHeroQueryKey = (params: GetHeroParams) => {
  return [`/Hero`, ...(params ? [params] : [])] as const;
};

export const getGetHeroQueryOptions = <
  TData = Awaited<ReturnType<typeof getHero>>,
  TError = unknown,
>(
  params: GetHeroParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getHero>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetHeroQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getHero>>> = ({
    signal,
  }) => getHero(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getHero>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetHeroQueryResult = NonNullable<
  Awaited<ReturnType<typeof getHero>>
>;
export type GetHeroQueryError = unknown;

export function useGetHero<
  TData = Awaited<ReturnType<typeof getHero>>,
  TError = unknown,
>(
  params: GetHeroParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getHero>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHero>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetHero<
  TData = Awaited<ReturnType<typeof getHero>>,
  TError = unknown,
>(
  params: GetHeroParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getHero>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHero>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetHero<
  TData = Awaited<ReturnType<typeof getHero>>,
  TError = unknown,
>(
  params: GetHeroParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getHero>>, TError, TData>
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetHero<
  TData = Awaited<ReturnType<typeof getHero>>,
  TError = unknown,
>(
  params: GetHeroParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getHero>>, TError, TData>
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetHeroQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postHero = (
  uploadHeroRequest: UploadHeroRequest,
  params: PostHeroParams,
  signal?: AbortSignal,
) => {
  return authorizedFetch<void>({
    url: `/Hero`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: uploadHeroRequest,
    params,
    signal,
  });
};

export const getPostHeroMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postHero>>,
    TError,
    { data: UploadHeroRequest; params: PostHeroParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postHero>>,
  TError,
  { data: UploadHeroRequest; params: PostHeroParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postHero>>,
    { data: UploadHeroRequest; params: PostHeroParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return postHero(data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostHeroMutationResult = NonNullable<
  Awaited<ReturnType<typeof postHero>>
>;
export type PostHeroMutationBody = UploadHeroRequest;
export type PostHeroMutationError = unknown;

export const usePostHero = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postHero>>,
    TError,
    { data: UploadHeroRequest; params: PostHeroParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postHero>>,
  TError,
  { data: UploadHeroRequest; params: PostHeroParams },
  TContext
> => {
  const mutationOptions = getPostHeroMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postHeroAssets = (
  postHeroAssetsBody: PostHeroAssetsBody,
  params: PostHeroAssetsParams,
  signal?: AbortSignal,
) => {
  const formData = new FormData();
  if (postHeroAssetsBody.Image !== undefined) {
    formData.append("Image", postHeroAssetsBody.Image);
  }
  if (postHeroAssetsBody.removedAssets !== undefined) {
    postHeroAssetsBody.removedAssets.forEach((value) =>
      formData.append("removedAssets", value),
    );
  }

  return authorizedFetch<void>({
    url: `/Hero/assets`,
    method: "POST",
    headers: { "Content-Type": "multipart/form-data" },
    data: formData,
    params,
    signal,
  });
};

export const getPostHeroAssetsMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postHeroAssets>>,
    TError,
    { data: PostHeroAssetsBody; params: PostHeroAssetsParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postHeroAssets>>,
  TError,
  { data: PostHeroAssetsBody; params: PostHeroAssetsParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postHeroAssets>>,
    { data: PostHeroAssetsBody; params: PostHeroAssetsParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return postHeroAssets(data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostHeroAssetsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postHeroAssets>>
>;
export type PostHeroAssetsMutationBody = PostHeroAssetsBody;
export type PostHeroAssetsMutationError = unknown;

export const usePostHeroAssets = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postHeroAssets>>,
    TError,
    { data: PostHeroAssetsBody; params: PostHeroAssetsParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postHeroAssets>>,
  TError,
  { data: PostHeroAssetsBody; params: PostHeroAssetsParams },
  TContext
> => {
  const mutationOptions = getPostHeroAssetsMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postMenuItems = (
  postMenuItemsBody: PostMenuItemsBody,
  params: PostMenuItemsParams,
  signal?: AbortSignal,
) => {
  const formData = new FormData();
  if (postMenuItemsBody.menuItemsJson !== undefined) {
    formData.append("menuItemsJson", postMenuItemsBody.menuItemsJson);
  }
  if (postMenuItemsBody.files !== undefined) {
    postMenuItemsBody.files.forEach((value) => formData.append("files", value));
  }

  return authorizedFetch<void>({
    url: `/Menu/items`,
    method: "POST",
    headers: { "Content-Type": "multipart/form-data" },
    data: formData,
    params,
    signal,
  });
};

export const getPostMenuItemsMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postMenuItems>>,
    TError,
    { data: PostMenuItemsBody; params: PostMenuItemsParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postMenuItems>>,
  TError,
  { data: PostMenuItemsBody; params: PostMenuItemsParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postMenuItems>>,
    { data: PostMenuItemsBody; params: PostMenuItemsParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return postMenuItems(data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostMenuItemsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postMenuItems>>
>;
export type PostMenuItemsMutationBody = PostMenuItemsBody;
export type PostMenuItemsMutationError = unknown;

export const usePostMenuItems = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postMenuItems>>,
    TError,
    { data: PostMenuItemsBody; params: PostMenuItemsParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postMenuItems>>,
  TError,
  { data: PostMenuItemsBody; params: PostMenuItemsParams },
  TContext
> => {
  const mutationOptions = getPostMenuItemsMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postMenuCategory = (
  addCategoryRequest: AddCategoryRequest,
  params: PostMenuCategoryParams,
  signal?: AbortSignal,
) => {
  return authorizedFetch<void>({
    url: `/Menu/category`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: addCategoryRequest,
    params,
    signal,
  });
};

export const getPostMenuCategoryMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postMenuCategory>>,
    TError,
    { data: AddCategoryRequest; params: PostMenuCategoryParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postMenuCategory>>,
  TError,
  { data: AddCategoryRequest; params: PostMenuCategoryParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postMenuCategory>>,
    { data: AddCategoryRequest; params: PostMenuCategoryParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return postMenuCategory(data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostMenuCategoryMutationResult = NonNullable<
  Awaited<ReturnType<typeof postMenuCategory>>
>;
export type PostMenuCategoryMutationBody = AddCategoryRequest;
export type PostMenuCategoryMutationError = unknown;

export const usePostMenuCategory = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postMenuCategory>>,
    TError,
    { data: AddCategoryRequest; params: PostMenuCategoryParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postMenuCategory>>,
  TError,
  { data: AddCategoryRequest; params: PostMenuCategoryParams },
  TContext
> => {
  const mutationOptions = getPostMenuCategoryMutationOptions(options);

  return useMutation(mutationOptions);
};

export const deleteMenuCategory = (params: DeleteMenuCategoryParams) => {
  return authorizedFetch<void>({
    url: `/Menu/category`,
    method: "DELETE",
    params,
  });
};

export const getDeleteMenuCategoryMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteMenuCategory>>,
    TError,
    { params: DeleteMenuCategoryParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteMenuCategory>>,
  TError,
  { params: DeleteMenuCategoryParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteMenuCategory>>,
    { params: DeleteMenuCategoryParams }
  > = (props) => {
    const { params } = props ?? {};

    return deleteMenuCategory(params);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteMenuCategoryMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteMenuCategory>>
>;

export type DeleteMenuCategoryMutationError = unknown;

export const useDeleteMenuCategory = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteMenuCategory>>,
    TError,
    { params: DeleteMenuCategoryParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteMenuCategory>>,
  TError,
  { params: DeleteMenuCategoryParams },
  TContext
> => {
  const mutationOptions = getDeleteMenuCategoryMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postMenuCategoryOrder = (
  addCategoryRequest: AddCategoryRequest[],
  params: PostMenuCategoryOrderParams,
  signal?: AbortSignal,
) => {
  return authorizedFetch<void>({
    url: `/Menu/category/order`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: addCategoryRequest,
    params,
    signal,
  });
};

export const getPostMenuCategoryOrderMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postMenuCategoryOrder>>,
    TError,
    { data: AddCategoryRequest[]; params: PostMenuCategoryOrderParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postMenuCategoryOrder>>,
  TError,
  { data: AddCategoryRequest[]; params: PostMenuCategoryOrderParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postMenuCategoryOrder>>,
    { data: AddCategoryRequest[]; params: PostMenuCategoryOrderParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return postMenuCategoryOrder(data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostMenuCategoryOrderMutationResult = NonNullable<
  Awaited<ReturnType<typeof postMenuCategoryOrder>>
>;
export type PostMenuCategoryOrderMutationBody = AddCategoryRequest[];
export type PostMenuCategoryOrderMutationError = unknown;

export const usePostMenuCategoryOrder = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postMenuCategoryOrder>>,
    TError,
    { data: AddCategoryRequest[]; params: PostMenuCategoryOrderParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postMenuCategoryOrder>>,
  TError,
  { data: AddCategoryRequest[]; params: PostMenuCategoryOrderParams },
  TContext
> => {
  const mutationOptions = getPostMenuCategoryOrderMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getNewsArticle = (
  params: GetNewsArticleParams,
  signal?: AbortSignal,
) => {
  return authorizedFetch<NewsArticleResponse[]>({
    url: `/NewsArticle`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetNewsArticleQueryKey = (params: GetNewsArticleParams) => {
  return [`/NewsArticle`, ...(params ? [params] : [])] as const;
};

export const getGetNewsArticleQueryOptions = <
  TData = Awaited<ReturnType<typeof getNewsArticle>>,
  TError = unknown,
>(
  params: GetNewsArticleParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getNewsArticle>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetNewsArticleQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getNewsArticle>>> = ({
    signal,
  }) => getNewsArticle(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getNewsArticle>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetNewsArticleQueryResult = NonNullable<
  Awaited<ReturnType<typeof getNewsArticle>>
>;
export type GetNewsArticleQueryError = unknown;

export function useGetNewsArticle<
  TData = Awaited<ReturnType<typeof getNewsArticle>>,
  TError = unknown,
>(
  params: GetNewsArticleParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getNewsArticle>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNewsArticle>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetNewsArticle<
  TData = Awaited<ReturnType<typeof getNewsArticle>>,
  TError = unknown,
>(
  params: GetNewsArticleParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getNewsArticle>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNewsArticle>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetNewsArticle<
  TData = Awaited<ReturnType<typeof getNewsArticle>>,
  TError = unknown,
>(
  params: GetNewsArticleParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getNewsArticle>>, TError, TData>
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetNewsArticle<
  TData = Awaited<ReturnType<typeof getNewsArticle>>,
  TError = unknown,
>(
  params: GetNewsArticleParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getNewsArticle>>, TError, TData>
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetNewsArticleQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postNewsArticle = (
  addNewsArticleRequest: AddNewsArticleRequest,
  params: PostNewsArticleParams,
  signal?: AbortSignal,
) => {
  return authorizedFetch<void>({
    url: `/NewsArticle`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: addNewsArticleRequest,
    params,
    signal,
  });
};

export const getPostNewsArticleMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postNewsArticle>>,
    TError,
    { data: AddNewsArticleRequest; params: PostNewsArticleParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postNewsArticle>>,
  TError,
  { data: AddNewsArticleRequest; params: PostNewsArticleParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postNewsArticle>>,
    { data: AddNewsArticleRequest; params: PostNewsArticleParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return postNewsArticle(data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostNewsArticleMutationResult = NonNullable<
  Awaited<ReturnType<typeof postNewsArticle>>
>;
export type PostNewsArticleMutationBody = AddNewsArticleRequest;
export type PostNewsArticleMutationError = unknown;

export const usePostNewsArticle = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postNewsArticle>>,
    TError,
    { data: AddNewsArticleRequest; params: PostNewsArticleParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postNewsArticle>>,
  TError,
  { data: AddNewsArticleRequest; params: PostNewsArticleParams },
  TContext
> => {
  const mutationOptions = getPostNewsArticleMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getNewsArticleId = (
  id: number,
  params: GetNewsArticleIdParams,
  signal?: AbortSignal,
) => {
  return authorizedFetch<GetNewsArticleId200>({
    url: `/NewsArticle/${id}`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetNewsArticleIdQueryKey = (
  id: number,
  params: GetNewsArticleIdParams,
) => {
  return [`/NewsArticle/${id}`, ...(params ? [params] : [])] as const;
};

export const getGetNewsArticleIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getNewsArticleId>>,
  TError = unknown,
>(
  id: number,
  params: GetNewsArticleIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getNewsArticleId>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetNewsArticleIdQueryKey(id, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getNewsArticleId>>
  > = ({ signal }) => getNewsArticleId(id, params, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getNewsArticleId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetNewsArticleIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getNewsArticleId>>
>;
export type GetNewsArticleIdQueryError = unknown;

export function useGetNewsArticleId<
  TData = Awaited<ReturnType<typeof getNewsArticleId>>,
  TError = unknown,
>(
  id: number,
  params: GetNewsArticleIdParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getNewsArticleId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNewsArticleId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetNewsArticleId<
  TData = Awaited<ReturnType<typeof getNewsArticleId>>,
  TError = unknown,
>(
  id: number,
  params: GetNewsArticleIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getNewsArticleId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNewsArticleId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetNewsArticleId<
  TData = Awaited<ReturnType<typeof getNewsArticleId>>,
  TError = unknown,
>(
  id: number,
  params: GetNewsArticleIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getNewsArticleId>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetNewsArticleId<
  TData = Awaited<ReturnType<typeof getNewsArticleId>>,
  TError = unknown,
>(
  id: number,
  params: GetNewsArticleIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getNewsArticleId>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetNewsArticleIdQueryOptions(id, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const deleteNewsArticleId = (
  id: number,
  params: DeleteNewsArticleIdParams,
) => {
  return authorizedFetch<void>({
    url: `/NewsArticle/${id}`,
    method: "DELETE",
    params,
  });
};

export const getDeleteNewsArticleIdMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteNewsArticleId>>,
    TError,
    { id: number; params: DeleteNewsArticleIdParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteNewsArticleId>>,
  TError,
  { id: number; params: DeleteNewsArticleIdParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteNewsArticleId>>,
    { id: number; params: DeleteNewsArticleIdParams }
  > = (props) => {
    const { id, params } = props ?? {};

    return deleteNewsArticleId(id, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteNewsArticleIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteNewsArticleId>>
>;

export type DeleteNewsArticleIdMutationError = unknown;

export const useDeleteNewsArticleId = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteNewsArticleId>>,
    TError,
    { id: number; params: DeleteNewsArticleIdParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteNewsArticleId>>,
  TError,
  { id: number; params: DeleteNewsArticleIdParams },
  TContext
> => {
  const mutationOptions = getDeleteNewsArticleIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const putNewsArticleId = (
  id: number,
  addNewsArticleRequest: AddNewsArticleRequest,
  params: PutNewsArticleIdParams,
) => {
  return authorizedFetch<void>({
    url: `/NewsArticle/${id}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: addNewsArticleRequest,
    params,
  });
};

export const getPutNewsArticleIdMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putNewsArticleId>>,
    TError,
    { id: number; data: AddNewsArticleRequest; params: PutNewsArticleIdParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putNewsArticleId>>,
  TError,
  { id: number; data: AddNewsArticleRequest; params: PutNewsArticleIdParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putNewsArticleId>>,
    { id: number; data: AddNewsArticleRequest; params: PutNewsArticleIdParams }
  > = (props) => {
    const { id, data, params } = props ?? {};

    return putNewsArticleId(id, data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutNewsArticleIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putNewsArticleId>>
>;
export type PutNewsArticleIdMutationBody = AddNewsArticleRequest;
export type PutNewsArticleIdMutationError = unknown;

export const usePutNewsArticleId = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putNewsArticleId>>,
    TError,
    { id: number; data: AddNewsArticleRequest; params: PutNewsArticleIdParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putNewsArticleId>>,
  TError,
  { id: number; data: AddNewsArticleRequest; params: PutNewsArticleIdParams },
  TContext
> => {
  const mutationOptions = getPutNewsArticleIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const putNewsArticleIdAssets = (
  id: number,
  putNewsArticleIdAssetsBody: PutNewsArticleIdAssetsBody,
  params: PutNewsArticleIdAssetsParams,
) => {
  const formData = new FormData();
  if (putNewsArticleIdAssetsBody.Image !== undefined) {
    formData.append("Image", putNewsArticleIdAssetsBody.Image);
  }
  if (putNewsArticleIdAssetsBody.removedAssets !== undefined) {
    putNewsArticleIdAssetsBody.removedAssets.forEach((value) =>
      formData.append("removedAssets", value),
    );
  }

  return authorizedFetch<void>({
    url: `/NewsArticle/${id}/assets`,
    method: "PUT",
    headers: { "Content-Type": "multipart/form-data" },
    data: formData,
    params,
  });
};

export const getPutNewsArticleIdAssetsMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putNewsArticleIdAssets>>,
    TError,
    {
      id: number;
      data: PutNewsArticleIdAssetsBody;
      params: PutNewsArticleIdAssetsParams;
    },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putNewsArticleIdAssets>>,
  TError,
  {
    id: number;
    data: PutNewsArticleIdAssetsBody;
    params: PutNewsArticleIdAssetsParams;
  },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putNewsArticleIdAssets>>,
    {
      id: number;
      data: PutNewsArticleIdAssetsBody;
      params: PutNewsArticleIdAssetsParams;
    }
  > = (props) => {
    const { id, data, params } = props ?? {};

    return putNewsArticleIdAssets(id, data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutNewsArticleIdAssetsMutationResult = NonNullable<
  Awaited<ReturnType<typeof putNewsArticleIdAssets>>
>;
export type PutNewsArticleIdAssetsMutationBody = PutNewsArticleIdAssetsBody;
export type PutNewsArticleIdAssetsMutationError = unknown;

export const usePutNewsArticleIdAssets = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putNewsArticleIdAssets>>,
    TError,
    {
      id: number;
      data: PutNewsArticleIdAssetsBody;
      params: PutNewsArticleIdAssetsParams;
    },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putNewsArticleIdAssets>>,
  TError,
  {
    id: number;
    data: PutNewsArticleIdAssetsBody;
    params: PutNewsArticleIdAssetsParams;
  },
  TContext
> => {
  const mutationOptions = getPutNewsArticleIdAssetsMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getOpeningHour = (
  params: GetOpeningHourParams,
  signal?: AbortSignal,
) => {
  return authorizedFetch<OpeningHourResponse[]>({
    url: `/OpeningHour`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetOpeningHourQueryKey = (params: GetOpeningHourParams) => {
  return [`/OpeningHour`, ...(params ? [params] : [])] as const;
};

export const getGetOpeningHourQueryOptions = <
  TData = Awaited<ReturnType<typeof getOpeningHour>>,
  TError = unknown,
>(
  params: GetOpeningHourParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getOpeningHour>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetOpeningHourQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getOpeningHour>>> = ({
    signal,
  }) => getOpeningHour(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getOpeningHour>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetOpeningHourQueryResult = NonNullable<
  Awaited<ReturnType<typeof getOpeningHour>>
>;
export type GetOpeningHourQueryError = unknown;

export function useGetOpeningHour<
  TData = Awaited<ReturnType<typeof getOpeningHour>>,
  TError = unknown,
>(
  params: GetOpeningHourParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getOpeningHour>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOpeningHour>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetOpeningHour<
  TData = Awaited<ReturnType<typeof getOpeningHour>>,
  TError = unknown,
>(
  params: GetOpeningHourParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getOpeningHour>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOpeningHour>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetOpeningHour<
  TData = Awaited<ReturnType<typeof getOpeningHour>>,
  TError = unknown,
>(
  params: GetOpeningHourParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getOpeningHour>>, TError, TData>
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetOpeningHour<
  TData = Awaited<ReturnType<typeof getOpeningHour>>,
  TError = unknown,
>(
  params: GetOpeningHourParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getOpeningHour>>, TError, TData>
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetOpeningHourQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postOpeningHour = (
  addOpeningHourRequest: AddOpeningHourRequest[],
  params: PostOpeningHourParams,
  signal?: AbortSignal,
) => {
  return authorizedFetch<void>({
    url: `/OpeningHour`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: addOpeningHourRequest,
    params,
    signal,
  });
};

export const getPostOpeningHourMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postOpeningHour>>,
    TError,
    { data: AddOpeningHourRequest[]; params: PostOpeningHourParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postOpeningHour>>,
  TError,
  { data: AddOpeningHourRequest[]; params: PostOpeningHourParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postOpeningHour>>,
    { data: AddOpeningHourRequest[]; params: PostOpeningHourParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return postOpeningHour(data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostOpeningHourMutationResult = NonNullable<
  Awaited<ReturnType<typeof postOpeningHour>>
>;
export type PostOpeningHourMutationBody = AddOpeningHourRequest[];
export type PostOpeningHourMutationError = unknown;

export const usePostOpeningHour = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postOpeningHour>>,
    TError,
    { data: AddOpeningHourRequest[]; params: PostOpeningHourParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postOpeningHour>>,
  TError,
  { data: AddOpeningHourRequest[]; params: PostOpeningHourParams },
  TContext
> => {
  const mutationOptions = getPostOpeningHourMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getPublicGetCustomerConfigMeta = (
  params: GetPublicGetCustomerConfigMetaParams,
  signal?: AbortSignal,
) => {
  return authorizedFetch<CustomerConfigMetaResponse>({
    url: `/Public/get-customer-config-meta`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetPublicGetCustomerConfigMetaQueryKey = (
  params: GetPublicGetCustomerConfigMetaParams,
) => {
  return [
    `/Public/get-customer-config-meta`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetPublicGetCustomerConfigMetaQueryOptions = <
  TData = Awaited<ReturnType<typeof getPublicGetCustomerConfigMeta>>,
  TError = unknown,
>(
  params: GetPublicGetCustomerConfigMetaParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPublicGetCustomerConfigMeta>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetPublicGetCustomerConfigMetaQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getPublicGetCustomerConfigMeta>>
  > = ({ signal }) => getPublicGetCustomerConfigMeta(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPublicGetCustomerConfigMeta>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetPublicGetCustomerConfigMetaQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPublicGetCustomerConfigMeta>>
>;
export type GetPublicGetCustomerConfigMetaQueryError = unknown;

export function useGetPublicGetCustomerConfigMeta<
  TData = Awaited<ReturnType<typeof getPublicGetCustomerConfigMeta>>,
  TError = unknown,
>(
  params: GetPublicGetCustomerConfigMetaParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPublicGetCustomerConfigMeta>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPublicGetCustomerConfigMeta>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetPublicGetCustomerConfigMeta<
  TData = Awaited<ReturnType<typeof getPublicGetCustomerConfigMeta>>,
  TError = unknown,
>(
  params: GetPublicGetCustomerConfigMetaParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPublicGetCustomerConfigMeta>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPublicGetCustomerConfigMeta>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetPublicGetCustomerConfigMeta<
  TData = Awaited<ReturnType<typeof getPublicGetCustomerConfigMeta>>,
  TError = unknown,
>(
  params: GetPublicGetCustomerConfigMetaParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPublicGetCustomerConfigMeta>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetPublicGetCustomerConfigMeta<
  TData = Awaited<ReturnType<typeof getPublicGetCustomerConfigMeta>>,
  TError = unknown,
>(
  params: GetPublicGetCustomerConfigMetaParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPublicGetCustomerConfigMeta>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetPublicGetCustomerConfigMetaQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getPublicAbout = (
  params: GetPublicAboutParams,
  signal?: AbortSignal,
) => {
  return authorizedFetch<SiteSectionAboutResponse>({
    url: `/Public/about`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetPublicAboutQueryKey = (params: GetPublicAboutParams) => {
  return [`/Public/about`, ...(params ? [params] : [])] as const;
};

export const getGetPublicAboutQueryOptions = <
  TData = Awaited<ReturnType<typeof getPublicAbout>>,
  TError = unknown,
>(
  params: GetPublicAboutParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPublicAbout>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetPublicAboutQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPublicAbout>>> = ({
    signal,
  }) => getPublicAbout(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPublicAbout>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetPublicAboutQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPublicAbout>>
>;
export type GetPublicAboutQueryError = unknown;

export function useGetPublicAbout<
  TData = Awaited<ReturnType<typeof getPublicAbout>>,
  TError = unknown,
>(
  params: GetPublicAboutParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPublicAbout>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPublicAbout>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetPublicAbout<
  TData = Awaited<ReturnType<typeof getPublicAbout>>,
  TError = unknown,
>(
  params: GetPublicAboutParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPublicAbout>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPublicAbout>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetPublicAbout<
  TData = Awaited<ReturnType<typeof getPublicAbout>>,
  TError = unknown,
>(
  params: GetPublicAboutParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPublicAbout>>, TError, TData>
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetPublicAbout<
  TData = Awaited<ReturnType<typeof getPublicAbout>>,
  TError = unknown,
>(
  params: GetPublicAboutParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPublicAbout>>, TError, TData>
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetPublicAboutQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getPublicGetCustomerTranslations = (
  params: GetPublicGetCustomerTranslationsParams,
  signal?: AbortSignal,
) => {
  return authorizedFetch<CustomerConfigTranslations>({
    url: `/Public/get-customer-translations`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetPublicGetCustomerTranslationsQueryKey = (
  params: GetPublicGetCustomerTranslationsParams,
) => {
  return [
    `/Public/get-customer-translations`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetPublicGetCustomerTranslationsQueryOptions = <
  TData = Awaited<ReturnType<typeof getPublicGetCustomerTranslations>>,
  TError = unknown,
>(
  params: GetPublicGetCustomerTranslationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPublicGetCustomerTranslations>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetPublicGetCustomerTranslationsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getPublicGetCustomerTranslations>>
  > = ({ signal }) => getPublicGetCustomerTranslations(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPublicGetCustomerTranslations>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetPublicGetCustomerTranslationsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPublicGetCustomerTranslations>>
>;
export type GetPublicGetCustomerTranslationsQueryError = unknown;

export function useGetPublicGetCustomerTranslations<
  TData = Awaited<ReturnType<typeof getPublicGetCustomerTranslations>>,
  TError = unknown,
>(
  params: GetPublicGetCustomerTranslationsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPublicGetCustomerTranslations>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPublicGetCustomerTranslations>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetPublicGetCustomerTranslations<
  TData = Awaited<ReturnType<typeof getPublicGetCustomerTranslations>>,
  TError = unknown,
>(
  params: GetPublicGetCustomerTranslationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPublicGetCustomerTranslations>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPublicGetCustomerTranslations>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetPublicGetCustomerTranslations<
  TData = Awaited<ReturnType<typeof getPublicGetCustomerTranslations>>,
  TError = unknown,
>(
  params: GetPublicGetCustomerTranslationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPublicGetCustomerTranslations>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetPublicGetCustomerTranslations<
  TData = Awaited<ReturnType<typeof getPublicGetCustomerTranslations>>,
  TError = unknown,
>(
  params: GetPublicGetCustomerTranslationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPublicGetCustomerTranslations>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetPublicGetCustomerTranslationsQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getPublicGetCustomerConfig = (
  params: GetPublicGetCustomerConfigParams,
  signal?: AbortSignal,
) => {
  return authorizedFetch<CustomerConfigResponse>({
    url: `/Public/get-customer-config`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetPublicGetCustomerConfigQueryKey = (
  params: GetPublicGetCustomerConfigParams,
) => {
  return [`/Public/get-customer-config`, ...(params ? [params] : [])] as const;
};

export const getGetPublicGetCustomerConfigQueryOptions = <
  TData = Awaited<ReturnType<typeof getPublicGetCustomerConfig>>,
  TError = unknown,
>(
  params: GetPublicGetCustomerConfigParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPublicGetCustomerConfig>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetPublicGetCustomerConfigQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getPublicGetCustomerConfig>>
  > = ({ signal }) => getPublicGetCustomerConfig(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPublicGetCustomerConfig>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetPublicGetCustomerConfigQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPublicGetCustomerConfig>>
>;
export type GetPublicGetCustomerConfigQueryError = unknown;

export function useGetPublicGetCustomerConfig<
  TData = Awaited<ReturnType<typeof getPublicGetCustomerConfig>>,
  TError = unknown,
>(
  params: GetPublicGetCustomerConfigParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPublicGetCustomerConfig>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPublicGetCustomerConfig>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetPublicGetCustomerConfig<
  TData = Awaited<ReturnType<typeof getPublicGetCustomerConfig>>,
  TError = unknown,
>(
  params: GetPublicGetCustomerConfigParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPublicGetCustomerConfig>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPublicGetCustomerConfig>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetPublicGetCustomerConfig<
  TData = Awaited<ReturnType<typeof getPublicGetCustomerConfig>>,
  TError = unknown,
>(
  params: GetPublicGetCustomerConfigParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPublicGetCustomerConfig>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetPublicGetCustomerConfig<
  TData = Awaited<ReturnType<typeof getPublicGetCustomerConfig>>,
  TError = unknown,
>(
  params: GetPublicGetCustomerConfigParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPublicGetCustomerConfig>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetPublicGetCustomerConfigQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getPublicGetCustomerMenu = (
  params: GetPublicGetCustomerMenuParams,
  signal?: AbortSignal,
) => {
  return authorizedFetch<MenuResponse>({
    url: `/Public/get-customer-menu`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetPublicGetCustomerMenuQueryKey = (
  params: GetPublicGetCustomerMenuParams,
) => {
  return [`/Public/get-customer-menu`, ...(params ? [params] : [])] as const;
};

export const getGetPublicGetCustomerMenuQueryOptions = <
  TData = Awaited<ReturnType<typeof getPublicGetCustomerMenu>>,
  TError = unknown,
>(
  params: GetPublicGetCustomerMenuParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPublicGetCustomerMenu>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetPublicGetCustomerMenuQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getPublicGetCustomerMenu>>
  > = ({ signal }) => getPublicGetCustomerMenu(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPublicGetCustomerMenu>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetPublicGetCustomerMenuQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPublicGetCustomerMenu>>
>;
export type GetPublicGetCustomerMenuQueryError = unknown;

export function useGetPublicGetCustomerMenu<
  TData = Awaited<ReturnType<typeof getPublicGetCustomerMenu>>,
  TError = unknown,
>(
  params: GetPublicGetCustomerMenuParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPublicGetCustomerMenu>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPublicGetCustomerMenu>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetPublicGetCustomerMenu<
  TData = Awaited<ReturnType<typeof getPublicGetCustomerMenu>>,
  TError = unknown,
>(
  params: GetPublicGetCustomerMenuParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPublicGetCustomerMenu>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPublicGetCustomerMenu>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetPublicGetCustomerMenu<
  TData = Awaited<ReturnType<typeof getPublicGetCustomerMenu>>,
  TError = unknown,
>(
  params: GetPublicGetCustomerMenuParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPublicGetCustomerMenu>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetPublicGetCustomerMenu<
  TData = Awaited<ReturnType<typeof getPublicGetCustomerMenu>>,
  TError = unknown,
>(
  params: GetPublicGetCustomerMenuParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPublicGetCustomerMenu>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetPublicGetCustomerMenuQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postPublicContact = (
  contactRequest: ContactRequest,
  params: PostPublicContactParams,
  signal?: AbortSignal,
) => {
  return authorizedFetch<void>({
    url: `/Public/contact`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: contactRequest,
    params,
    signal,
  });
};

export const getPostPublicContactMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postPublicContact>>,
    TError,
    { data: ContactRequest; params: PostPublicContactParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postPublicContact>>,
  TError,
  { data: ContactRequest; params: PostPublicContactParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postPublicContact>>,
    { data: ContactRequest; params: PostPublicContactParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return postPublicContact(data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostPublicContactMutationResult = NonNullable<
  Awaited<ReturnType<typeof postPublicContact>>
>;
export type PostPublicContactMutationBody = ContactRequest;
export type PostPublicContactMutationError = unknown;

export const usePostPublicContact = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postPublicContact>>,
    TError,
    { data: ContactRequest; params: PostPublicContactParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postPublicContact>>,
  TError,
  { data: ContactRequest; params: PostPublicContactParams },
  TContext
> => {
  const mutationOptions = getPostPublicContactMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postWebhook = (signal?: AbortSignal) => {
  return authorizedFetch<void>({ url: `/webhook`, method: "POST", signal });
};

export const getPostWebhookMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postWebhook>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postWebhook>>,
  TError,
  void,
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postWebhook>>,
    void
  > = () => {
    return postWebhook();
  };

  return { mutationFn, ...mutationOptions };
};

export type PostWebhookMutationResult = NonNullable<
  Awaited<ReturnType<typeof postWebhook>>
>;

export type PostWebhookMutationError = unknown;

export const usePostWebhook = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postWebhook>>,
    TError,
    void,
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postWebhook>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getPostWebhookMutationOptions(options);

  return useMutation(mutationOptions);
};
