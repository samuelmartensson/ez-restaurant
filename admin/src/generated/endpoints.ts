/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * backend
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import { authorizedFetch } from "../authorized-fetch";
export type GetPublicGetCustomerMenuParams = {
  key?: string;
};

export type GetPublicGetCustomerConfigParams = {
  key?: string;
};

export type PostOpeningHourParams = {
  key?: string;
};

export type GetOpeningHourParams = {
  key?: string;
};

export type PostMenuImportqoplamenuParams = {
  url?: string;
};

export type PostMenuCategoryOrderParams = {
  key?: string;
};

export type DeleteMenuCategoryParams = {
  id?: number;
  key?: string;
};

export type PostMenuCategoryParams = {
  key?: string;
};

export type PostMenuItemsBody = {
  files?: Blob[];
  menuItemsJson?: string;
};

export type PostMenuItemsParams = {
  key?: string;
};

export type PostCustomerHeroBody = {
  Image?: Blob;
  OrderUrl?: string;
  removedAssets?: string[];
};

export type PostCustomerHeroParams = {
  key?: string;
};

export type PostCustomerSiteConfigurationAssetsBody = {
  Font?: Blob;
  Logo?: Blob;
};

export type PostCustomerSiteConfigurationAssetsParams = {
  key?: string;
};

export type PostCustomerSiteConfigurationBody = {
  Adress?: string;
  Email?: string;
  Font?: string;
  Logo?: string;
  Phone?: string;
  SiteMetaTitle?: string;
  SiteName?: string;
  Theme?: string;
};

export type PostCustomerSiteConfigurationParams = {
  key?: string;
};

export type DeleteCustomerConfigParams = {
  key?: string;
};

export type SubscriptionState =
  (typeof SubscriptionState)[keyof typeof SubscriptionState];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SubscriptionState = {
  NUMBER_0: 0,
  NUMBER_1: 1,
} as const;

export interface SiteSectionHeroResponse {
  heroImage?: string;
  orderUrl?: string;
}

export interface SectionsResponse {
  hero?: SiteSectionHeroResponse;
}

export interface OpeningHourResponse {
  closeTime?: string;
  day?: CustomDayOfWeek;
  id?: number;
  isClosed?: boolean;
  openTime?: string;
}

export interface MenuItemResponse {
  categoryId: number;
  /** @minLength 1 */
  description: string;
  id: number;
  /** @nullable */
  image?: string | null;
  /** @minLength 1 */
  name: string;
  price: number;
  /** @nullable */
  tags?: string | null;
}

export interface MenuCategoryResponse {
  id: number;
  /** @minLength 1 */
  name: string;
  order: number;
}

export interface MenuResponse {
  categories: MenuCategoryResponse[];
  menuItems: MenuItemResponse[];
}

export interface CustomerConfigResponse {
  /** @nullable */
  adress?: string | null;
  domain?: string;
  /** @nullable */
  email?: string | null;
  /** @nullable */
  font?: string | null;
  heroType?: number;
  logo?: string;
  openingHours?: OpeningHourResponse[];
  /** @nullable */
  phone?: string | null;
  sections?: SectionsResponse;
  siteMetaTitle?: string;
  siteName?: string;
  theme?: string;
}

export type CustomDayOfWeek =
  (typeof CustomDayOfWeek)[keyof typeof CustomDayOfWeek];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CustomDayOfWeek = {
  NUMBER_1: 1,
  NUMBER_2: 2,
  NUMBER_3: 3,
  NUMBER_4: 4,
  NUMBER_5: 5,
  NUMBER_6: 6,
  NUMBER_7: 7,
} as const;

export interface CreateConfigRequest {
  domain?: string;
}

export interface CancelInfo {
  isCanceled?: boolean;
  isExpired?: boolean;
  /** @nullable */
  periodEnd?: string | null;
}

export interface CustomerResponse {
  cancelInfo?: CancelInfo;
  customerConfigs?: CustomerConfigResponse[];
  domain?: string;
  subscription?: SubscriptionState;
}

export interface AddOpeningHourRequest {
  closeTime?: string;
  id?: number;
  isClosed?: boolean;
  openTime?: string;
}

export interface AddCategoryRequest {
  id?: number;
  name?: string;
  /** @nullable */
  order?: number | null;
}

export const getCustomerCustomer = (signal?: AbortSignal) => {
  return authorizedFetch<CustomerResponse>({
    url: `/Customer/customer`,
    method: "GET",
    signal,
  });
};

export const getGetCustomerCustomerQueryKey = () => {
  return [`/Customer/customer`] as const;
};

export const getGetCustomerCustomerQueryOptions = <
  TData = Awaited<ReturnType<typeof getCustomerCustomer>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getCustomerCustomer>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCustomerCustomerQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getCustomerCustomer>>
  > = ({ signal }) => getCustomerCustomer(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCustomerCustomer>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetCustomerCustomerQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCustomerCustomer>>
>;
export type GetCustomerCustomerQueryError = unknown;

export function useGetCustomerCustomer<
  TData = Awaited<ReturnType<typeof getCustomerCustomer>>,
  TError = unknown,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getCustomerCustomer>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getCustomerCustomer>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetCustomerCustomer<
  TData = Awaited<ReturnType<typeof getCustomerCustomer>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getCustomerCustomer>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getCustomerCustomer>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetCustomerCustomer<
  TData = Awaited<ReturnType<typeof getCustomerCustomer>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getCustomerCustomer>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetCustomerCustomer<
  TData = Awaited<ReturnType<typeof getCustomerCustomer>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getCustomerCustomer>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetCustomerCustomerQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const putCustomerConfig = (createConfigRequest: CreateConfigRequest) => {
  return authorizedFetch<void>({
    url: `/Customer/config`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: createConfigRequest,
  });
};

export const getPutCustomerConfigMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putCustomerConfig>>,
    TError,
    { data: CreateConfigRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putCustomerConfig>>,
  TError,
  { data: CreateConfigRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putCustomerConfig>>,
    { data: CreateConfigRequest }
  > = (props) => {
    const { data } = props ?? {};

    return putCustomerConfig(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutCustomerConfigMutationResult = NonNullable<
  Awaited<ReturnType<typeof putCustomerConfig>>
>;
export type PutCustomerConfigMutationBody = CreateConfigRequest;
export type PutCustomerConfigMutationError = unknown;

export const usePutCustomerConfig = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putCustomerConfig>>,
    TError,
    { data: CreateConfigRequest },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putCustomerConfig>>,
  TError,
  { data: CreateConfigRequest },
  TContext
> => {
  const mutationOptions = getPutCustomerConfigMutationOptions(options);

  return useMutation(mutationOptions);
};

export const deleteCustomerConfig = (params?: DeleteCustomerConfigParams) => {
  return authorizedFetch<void>({
    url: `/Customer/config`,
    method: "DELETE",
    params,
  });
};

export const getDeleteCustomerConfigMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteCustomerConfig>>,
    TError,
    { params?: DeleteCustomerConfigParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteCustomerConfig>>,
  TError,
  { params?: DeleteCustomerConfigParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteCustomerConfig>>,
    { params?: DeleteCustomerConfigParams }
  > = (props) => {
    const { params } = props ?? {};

    return deleteCustomerConfig(params);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteCustomerConfigMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteCustomerConfig>>
>;

export type DeleteCustomerConfigMutationError = unknown;

export const useDeleteCustomerConfig = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteCustomerConfig>>,
    TError,
    { params?: DeleteCustomerConfigParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteCustomerConfig>>,
  TError,
  { params?: DeleteCustomerConfigParams },
  TContext
> => {
  const mutationOptions = getDeleteCustomerConfigMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postCustomerSiteConfiguration = (
  postCustomerSiteConfigurationBody: PostCustomerSiteConfigurationBody,
  params?: PostCustomerSiteConfigurationParams,
  signal?: AbortSignal,
) => {
  const formData = new FormData();
  if (postCustomerSiteConfigurationBody.SiteName !== undefined) {
    formData.append("SiteName", postCustomerSiteConfigurationBody.SiteName);
  }
  if (postCustomerSiteConfigurationBody.SiteMetaTitle !== undefined) {
    formData.append(
      "SiteMetaTitle",
      postCustomerSiteConfigurationBody.SiteMetaTitle,
    );
  }
  if (postCustomerSiteConfigurationBody.Theme !== undefined) {
    formData.append("Theme", postCustomerSiteConfigurationBody.Theme);
  }
  if (postCustomerSiteConfigurationBody.Logo !== undefined) {
    formData.append("Logo", postCustomerSiteConfigurationBody.Logo);
  }
  if (postCustomerSiteConfigurationBody.Font !== undefined) {
    formData.append("Font", postCustomerSiteConfigurationBody.Font);
  }
  if (postCustomerSiteConfigurationBody.Adress !== undefined) {
    formData.append("Adress", postCustomerSiteConfigurationBody.Adress);
  }
  if (postCustomerSiteConfigurationBody.Phone !== undefined) {
    formData.append("Phone", postCustomerSiteConfigurationBody.Phone);
  }
  if (postCustomerSiteConfigurationBody.Email !== undefined) {
    formData.append("Email", postCustomerSiteConfigurationBody.Email);
  }

  return authorizedFetch<void>({
    url: `/Customer/site-configuration`,
    method: "POST",
    headers: { "Content-Type": "multipart/form-data" },
    data: formData,
    params,
    signal,
  });
};

export const getPostCustomerSiteConfigurationMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postCustomerSiteConfiguration>>,
    TError,
    {
      data: PostCustomerSiteConfigurationBody;
      params?: PostCustomerSiteConfigurationParams;
    },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postCustomerSiteConfiguration>>,
  TError,
  {
    data: PostCustomerSiteConfigurationBody;
    params?: PostCustomerSiteConfigurationParams;
  },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postCustomerSiteConfiguration>>,
    {
      data: PostCustomerSiteConfigurationBody;
      params?: PostCustomerSiteConfigurationParams;
    }
  > = (props) => {
    const { data, params } = props ?? {};

    return postCustomerSiteConfiguration(data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostCustomerSiteConfigurationMutationResult = NonNullable<
  Awaited<ReturnType<typeof postCustomerSiteConfiguration>>
>;
export type PostCustomerSiteConfigurationMutationBody =
  PostCustomerSiteConfigurationBody;
export type PostCustomerSiteConfigurationMutationError = unknown;

export const usePostCustomerSiteConfiguration = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postCustomerSiteConfiguration>>,
    TError,
    {
      data: PostCustomerSiteConfigurationBody;
      params?: PostCustomerSiteConfigurationParams;
    },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postCustomerSiteConfiguration>>,
  TError,
  {
    data: PostCustomerSiteConfigurationBody;
    params?: PostCustomerSiteConfigurationParams;
  },
  TContext
> => {
  const mutationOptions =
    getPostCustomerSiteConfigurationMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postCustomerSiteConfigurationAssets = (
  postCustomerSiteConfigurationAssetsBody: PostCustomerSiteConfigurationAssetsBody,
  params?: PostCustomerSiteConfigurationAssetsParams,
  signal?: AbortSignal,
) => {
  const formData = new FormData();
  if (postCustomerSiteConfigurationAssetsBody.Logo !== undefined) {
    formData.append("Logo", postCustomerSiteConfigurationAssetsBody.Logo);
  }
  if (postCustomerSiteConfigurationAssetsBody.Font !== undefined) {
    formData.append("Font", postCustomerSiteConfigurationAssetsBody.Font);
  }

  return authorizedFetch<void>({
    url: `/Customer/site-configuration-assets`,
    method: "POST",
    headers: { "Content-Type": "multipart/form-data" },
    data: formData,
    params,
    signal,
  });
};

export const getPostCustomerSiteConfigurationAssetsMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postCustomerSiteConfigurationAssets>>,
    TError,
    {
      data: PostCustomerSiteConfigurationAssetsBody;
      params?: PostCustomerSiteConfigurationAssetsParams;
    },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postCustomerSiteConfigurationAssets>>,
  TError,
  {
    data: PostCustomerSiteConfigurationAssetsBody;
    params?: PostCustomerSiteConfigurationAssetsParams;
  },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postCustomerSiteConfigurationAssets>>,
    {
      data: PostCustomerSiteConfigurationAssetsBody;
      params?: PostCustomerSiteConfigurationAssetsParams;
    }
  > = (props) => {
    const { data, params } = props ?? {};

    return postCustomerSiteConfigurationAssets(data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostCustomerSiteConfigurationAssetsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postCustomerSiteConfigurationAssets>>
>;
export type PostCustomerSiteConfigurationAssetsMutationBody =
  PostCustomerSiteConfigurationAssetsBody;
export type PostCustomerSiteConfigurationAssetsMutationError = unknown;

export const usePostCustomerSiteConfigurationAssets = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postCustomerSiteConfigurationAssets>>,
    TError,
    {
      data: PostCustomerSiteConfigurationAssetsBody;
      params?: PostCustomerSiteConfigurationAssetsParams;
    },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postCustomerSiteConfigurationAssets>>,
  TError,
  {
    data: PostCustomerSiteConfigurationAssetsBody;
    params?: PostCustomerSiteConfigurationAssetsParams;
  },
  TContext
> => {
  const mutationOptions =
    getPostCustomerSiteConfigurationAssetsMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postCustomerHero = (
  postCustomerHeroBody: PostCustomerHeroBody,
  params?: PostCustomerHeroParams,
  signal?: AbortSignal,
) => {
  const formData = new FormData();
  if (postCustomerHeroBody.Image !== undefined) {
    formData.append("Image", postCustomerHeroBody.Image);
  }
  if (postCustomerHeroBody.removedAssets !== undefined) {
    postCustomerHeroBody.removedAssets.forEach((value) =>
      formData.append("removedAssets", value),
    );
  }
  if (postCustomerHeroBody.OrderUrl !== undefined) {
    formData.append("OrderUrl", postCustomerHeroBody.OrderUrl);
  }

  return authorizedFetch<void>({
    url: `/Customer/hero`,
    method: "POST",
    headers: { "Content-Type": "multipart/form-data" },
    data: formData,
    params,
    signal,
  });
};

export const getPostCustomerHeroMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postCustomerHero>>,
    TError,
    { data: PostCustomerHeroBody; params?: PostCustomerHeroParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postCustomerHero>>,
  TError,
  { data: PostCustomerHeroBody; params?: PostCustomerHeroParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postCustomerHero>>,
    { data: PostCustomerHeroBody; params?: PostCustomerHeroParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return postCustomerHero(data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostCustomerHeroMutationResult = NonNullable<
  Awaited<ReturnType<typeof postCustomerHero>>
>;
export type PostCustomerHeroMutationBody = PostCustomerHeroBody;
export type PostCustomerHeroMutationError = unknown;

export const usePostCustomerHero = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postCustomerHero>>,
    TError,
    { data: PostCustomerHeroBody; params?: PostCustomerHeroParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postCustomerHero>>,
  TError,
  { data: PostCustomerHeroBody; params?: PostCustomerHeroParams },
  TContext
> => {
  const mutationOptions = getPostCustomerHeroMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postMenuItems = (
  postMenuItemsBody: PostMenuItemsBody,
  params?: PostMenuItemsParams,
  signal?: AbortSignal,
) => {
  const formData = new FormData();
  if (postMenuItemsBody.menuItemsJson !== undefined) {
    formData.append("menuItemsJson", postMenuItemsBody.menuItemsJson);
  }
  if (postMenuItemsBody.files !== undefined) {
    postMenuItemsBody.files.forEach((value) => formData.append("files", value));
  }

  return authorizedFetch<void>({
    url: `/Menu/items`,
    method: "POST",
    headers: { "Content-Type": "multipart/form-data" },
    data: formData,
    params,
    signal,
  });
};

export const getPostMenuItemsMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postMenuItems>>,
    TError,
    { data: PostMenuItemsBody; params?: PostMenuItemsParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postMenuItems>>,
  TError,
  { data: PostMenuItemsBody; params?: PostMenuItemsParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postMenuItems>>,
    { data: PostMenuItemsBody; params?: PostMenuItemsParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return postMenuItems(data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostMenuItemsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postMenuItems>>
>;
export type PostMenuItemsMutationBody = PostMenuItemsBody;
export type PostMenuItemsMutationError = unknown;

export const usePostMenuItems = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postMenuItems>>,
    TError,
    { data: PostMenuItemsBody; params?: PostMenuItemsParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postMenuItems>>,
  TError,
  { data: PostMenuItemsBody; params?: PostMenuItemsParams },
  TContext
> => {
  const mutationOptions = getPostMenuItemsMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postMenuCategory = (
  addCategoryRequest: AddCategoryRequest,
  params?: PostMenuCategoryParams,
  signal?: AbortSignal,
) => {
  return authorizedFetch<void>({
    url: `/Menu/category`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: addCategoryRequest,
    params,
    signal,
  });
};

export const getPostMenuCategoryMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postMenuCategory>>,
    TError,
    { data: AddCategoryRequest; params?: PostMenuCategoryParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postMenuCategory>>,
  TError,
  { data: AddCategoryRequest; params?: PostMenuCategoryParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postMenuCategory>>,
    { data: AddCategoryRequest; params?: PostMenuCategoryParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return postMenuCategory(data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostMenuCategoryMutationResult = NonNullable<
  Awaited<ReturnType<typeof postMenuCategory>>
>;
export type PostMenuCategoryMutationBody = AddCategoryRequest;
export type PostMenuCategoryMutationError = unknown;

export const usePostMenuCategory = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postMenuCategory>>,
    TError,
    { data: AddCategoryRequest; params?: PostMenuCategoryParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postMenuCategory>>,
  TError,
  { data: AddCategoryRequest; params?: PostMenuCategoryParams },
  TContext
> => {
  const mutationOptions = getPostMenuCategoryMutationOptions(options);

  return useMutation(mutationOptions);
};

export const deleteMenuCategory = (params?: DeleteMenuCategoryParams) => {
  return authorizedFetch<void>({
    url: `/Menu/category`,
    method: "DELETE",
    params,
  });
};

export const getDeleteMenuCategoryMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteMenuCategory>>,
    TError,
    { params?: DeleteMenuCategoryParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteMenuCategory>>,
  TError,
  { params?: DeleteMenuCategoryParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteMenuCategory>>,
    { params?: DeleteMenuCategoryParams }
  > = (props) => {
    const { params } = props ?? {};

    return deleteMenuCategory(params);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteMenuCategoryMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteMenuCategory>>
>;

export type DeleteMenuCategoryMutationError = unknown;

export const useDeleteMenuCategory = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteMenuCategory>>,
    TError,
    { params?: DeleteMenuCategoryParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteMenuCategory>>,
  TError,
  { params?: DeleteMenuCategoryParams },
  TContext
> => {
  const mutationOptions = getDeleteMenuCategoryMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postMenuCategoryOrder = (
  addCategoryRequest: AddCategoryRequest[],
  params?: PostMenuCategoryOrderParams,
  signal?: AbortSignal,
) => {
  return authorizedFetch<void>({
    url: `/Menu/category/order`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: addCategoryRequest,
    params,
    signal,
  });
};

export const getPostMenuCategoryOrderMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postMenuCategoryOrder>>,
    TError,
    { data: AddCategoryRequest[]; params?: PostMenuCategoryOrderParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postMenuCategoryOrder>>,
  TError,
  { data: AddCategoryRequest[]; params?: PostMenuCategoryOrderParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postMenuCategoryOrder>>,
    { data: AddCategoryRequest[]; params?: PostMenuCategoryOrderParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return postMenuCategoryOrder(data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostMenuCategoryOrderMutationResult = NonNullable<
  Awaited<ReturnType<typeof postMenuCategoryOrder>>
>;
export type PostMenuCategoryOrderMutationBody = AddCategoryRequest[];
export type PostMenuCategoryOrderMutationError = unknown;

export const usePostMenuCategoryOrder = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postMenuCategoryOrder>>,
    TError,
    { data: AddCategoryRequest[]; params?: PostMenuCategoryOrderParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postMenuCategoryOrder>>,
  TError,
  { data: AddCategoryRequest[]; params?: PostMenuCategoryOrderParams },
  TContext
> => {
  const mutationOptions = getPostMenuCategoryOrderMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postMenuImportqoplamenu = (
  params?: PostMenuImportqoplamenuParams,
  signal?: AbortSignal,
) => {
  return authorizedFetch<void>({
    url: `/Menu/importqoplamenu`,
    method: "POST",
    params,
    signal,
  });
};

export const getPostMenuImportqoplamenuMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postMenuImportqoplamenu>>,
    TError,
    { params?: PostMenuImportqoplamenuParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postMenuImportqoplamenu>>,
  TError,
  { params?: PostMenuImportqoplamenuParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postMenuImportqoplamenu>>,
    { params?: PostMenuImportqoplamenuParams }
  > = (props) => {
    const { params } = props ?? {};

    return postMenuImportqoplamenu(params);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostMenuImportqoplamenuMutationResult = NonNullable<
  Awaited<ReturnType<typeof postMenuImportqoplamenu>>
>;

export type PostMenuImportqoplamenuMutationError = unknown;

export const usePostMenuImportqoplamenu = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postMenuImportqoplamenu>>,
    TError,
    { params?: PostMenuImportqoplamenuParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postMenuImportqoplamenu>>,
  TError,
  { params?: PostMenuImportqoplamenuParams },
  TContext
> => {
  const mutationOptions = getPostMenuImportqoplamenuMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getOpeningHour = (
  params?: GetOpeningHourParams,
  signal?: AbortSignal,
) => {
  return authorizedFetch<OpeningHourResponse[]>({
    url: `/OpeningHour`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetOpeningHourQueryKey = (params?: GetOpeningHourParams) => {
  return [`/OpeningHour`, ...(params ? [params] : [])] as const;
};

export const getGetOpeningHourQueryOptions = <
  TData = Awaited<ReturnType<typeof getOpeningHour>>,
  TError = unknown,
>(
  params?: GetOpeningHourParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getOpeningHour>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetOpeningHourQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getOpeningHour>>> = ({
    signal,
  }) => getOpeningHour(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getOpeningHour>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetOpeningHourQueryResult = NonNullable<
  Awaited<ReturnType<typeof getOpeningHour>>
>;
export type GetOpeningHourQueryError = unknown;

export function useGetOpeningHour<
  TData = Awaited<ReturnType<typeof getOpeningHour>>,
  TError = unknown,
>(
  params: undefined | GetOpeningHourParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getOpeningHour>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOpeningHour>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetOpeningHour<
  TData = Awaited<ReturnType<typeof getOpeningHour>>,
  TError = unknown,
>(
  params?: GetOpeningHourParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getOpeningHour>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOpeningHour>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetOpeningHour<
  TData = Awaited<ReturnType<typeof getOpeningHour>>,
  TError = unknown,
>(
  params?: GetOpeningHourParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getOpeningHour>>, TError, TData>
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetOpeningHour<
  TData = Awaited<ReturnType<typeof getOpeningHour>>,
  TError = unknown,
>(
  params?: GetOpeningHourParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getOpeningHour>>, TError, TData>
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetOpeningHourQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postOpeningHour = (
  addOpeningHourRequest: AddOpeningHourRequest[],
  params?: PostOpeningHourParams,
  signal?: AbortSignal,
) => {
  return authorizedFetch<void>({
    url: `/OpeningHour`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: addOpeningHourRequest,
    params,
    signal,
  });
};

export const getPostOpeningHourMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postOpeningHour>>,
    TError,
    { data: AddOpeningHourRequest[]; params?: PostOpeningHourParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postOpeningHour>>,
  TError,
  { data: AddOpeningHourRequest[]; params?: PostOpeningHourParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postOpeningHour>>,
    { data: AddOpeningHourRequest[]; params?: PostOpeningHourParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return postOpeningHour(data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostOpeningHourMutationResult = NonNullable<
  Awaited<ReturnType<typeof postOpeningHour>>
>;
export type PostOpeningHourMutationBody = AddOpeningHourRequest[];
export type PostOpeningHourMutationError = unknown;

export const usePostOpeningHour = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postOpeningHour>>,
    TError,
    { data: AddOpeningHourRequest[]; params?: PostOpeningHourParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postOpeningHour>>,
  TError,
  { data: AddOpeningHourRequest[]; params?: PostOpeningHourParams },
  TContext
> => {
  const mutationOptions = getPostOpeningHourMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getPublicGetCustomerConfig = (
  params?: GetPublicGetCustomerConfigParams,
  signal?: AbortSignal,
) => {
  return authorizedFetch<CustomerConfigResponse>({
    url: `/Public/get-customer-config`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetPublicGetCustomerConfigQueryKey = (
  params?: GetPublicGetCustomerConfigParams,
) => {
  return [`/Public/get-customer-config`, ...(params ? [params] : [])] as const;
};

export const getGetPublicGetCustomerConfigQueryOptions = <
  TData = Awaited<ReturnType<typeof getPublicGetCustomerConfig>>,
  TError = unknown,
>(
  params?: GetPublicGetCustomerConfigParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPublicGetCustomerConfig>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetPublicGetCustomerConfigQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getPublicGetCustomerConfig>>
  > = ({ signal }) => getPublicGetCustomerConfig(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPublicGetCustomerConfig>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetPublicGetCustomerConfigQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPublicGetCustomerConfig>>
>;
export type GetPublicGetCustomerConfigQueryError = unknown;

export function useGetPublicGetCustomerConfig<
  TData = Awaited<ReturnType<typeof getPublicGetCustomerConfig>>,
  TError = unknown,
>(
  params: undefined | GetPublicGetCustomerConfigParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPublicGetCustomerConfig>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPublicGetCustomerConfig>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetPublicGetCustomerConfig<
  TData = Awaited<ReturnType<typeof getPublicGetCustomerConfig>>,
  TError = unknown,
>(
  params?: GetPublicGetCustomerConfigParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPublicGetCustomerConfig>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPublicGetCustomerConfig>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetPublicGetCustomerConfig<
  TData = Awaited<ReturnType<typeof getPublicGetCustomerConfig>>,
  TError = unknown,
>(
  params?: GetPublicGetCustomerConfigParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPublicGetCustomerConfig>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetPublicGetCustomerConfig<
  TData = Awaited<ReturnType<typeof getPublicGetCustomerConfig>>,
  TError = unknown,
>(
  params?: GetPublicGetCustomerConfigParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPublicGetCustomerConfig>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetPublicGetCustomerConfigQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getPublicGetCustomerMenu = (
  params?: GetPublicGetCustomerMenuParams,
  signal?: AbortSignal,
) => {
  return authorizedFetch<MenuResponse>({
    url: `/Public/get-customer-menu`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetPublicGetCustomerMenuQueryKey = (
  params?: GetPublicGetCustomerMenuParams,
) => {
  return [`/Public/get-customer-menu`, ...(params ? [params] : [])] as const;
};

export const getGetPublicGetCustomerMenuQueryOptions = <
  TData = Awaited<ReturnType<typeof getPublicGetCustomerMenu>>,
  TError = unknown,
>(
  params?: GetPublicGetCustomerMenuParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPublicGetCustomerMenu>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetPublicGetCustomerMenuQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getPublicGetCustomerMenu>>
  > = ({ signal }) => getPublicGetCustomerMenu(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPublicGetCustomerMenu>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetPublicGetCustomerMenuQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPublicGetCustomerMenu>>
>;
export type GetPublicGetCustomerMenuQueryError = unknown;

export function useGetPublicGetCustomerMenu<
  TData = Awaited<ReturnType<typeof getPublicGetCustomerMenu>>,
  TError = unknown,
>(
  params: undefined | GetPublicGetCustomerMenuParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPublicGetCustomerMenu>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPublicGetCustomerMenu>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetPublicGetCustomerMenu<
  TData = Awaited<ReturnType<typeof getPublicGetCustomerMenu>>,
  TError = unknown,
>(
  params?: GetPublicGetCustomerMenuParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPublicGetCustomerMenu>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPublicGetCustomerMenu>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetPublicGetCustomerMenu<
  TData = Awaited<ReturnType<typeof getPublicGetCustomerMenu>>,
  TError = unknown,
>(
  params?: GetPublicGetCustomerMenuParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPublicGetCustomerMenu>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetPublicGetCustomerMenu<
  TData = Awaited<ReturnType<typeof getPublicGetCustomerMenu>>,
  TError = unknown,
>(
  params?: GetPublicGetCustomerMenuParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPublicGetCustomerMenu>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetPublicGetCustomerMenuQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postWebhook = (signal?: AbortSignal) => {
  return authorizedFetch<void>({ url: `/webhook`, method: "POST", signal });
};

export const getPostWebhookMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postWebhook>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postWebhook>>,
  TError,
  void,
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postWebhook>>,
    void
  > = () => {
    return postWebhook();
  };

  return { mutationFn, ...mutationOptions };
};

export type PostWebhookMutationResult = NonNullable<
  Awaited<ReturnType<typeof postWebhook>>
>;

export type PostWebhookMutationError = unknown;

export const usePostWebhook = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postWebhook>>,
    TError,
    void,
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postWebhook>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getPostWebhookMutationOptions(options);

  return useMutation(mutationOptions);
};
