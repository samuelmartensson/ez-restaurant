/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * backend
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import { authorizedFetch } from "../authorized-fetch";
export type DeleteSectionGalleryParams = {
  id?: number;
  Key: string;
  Language: string;
};

export type PostSectionGalleryBody = {
  Images?: Blob[];
};

export type PostSectionGalleryParams = {
  Key: string;
  Language: string;
};

export type PostSectionAboutBody = {
  Description?: string;
  Image?: Blob;
  removedAssets?: string[];
};

export type PostSectionAboutParams = {
  Key: string;
  Language: string;
};

export type PostSectionHeroBody = {
  Image?: Blob;
  OrderUrl?: string;
  removedAssets?: string[];
};

export type PostSectionHeroParams = {
  key: string;
};

export type PostPublicContactParams = {
  key: string;
};

export type GetPublicGetCustomerMenuParams = {
  Key: string;
  Language: string;
};

export type GetPublicGetCustomerConfigParams = {
  Key: string;
  Language: string;
};

export type GetPublicGetCustomerTranslationsParams = {
  Key: string;
  Language: string;
};

export type GetPublicAboutParams = {
  Key: string;
  Language: string;
};

export type GetPublicGetCustomerConfigMetaParams = {
  Key: string;
  Language: string;
};

export type PostOpeningHourParams = {
  Key: string;
  Language: string;
};

export type GetOpeningHourParams = {
  Key: string;
  Language: string;
};

export type PostMenuImportqoplamenuParams = {
  url?: string;
};

export type PostMenuCategoryOrderParams = {
  key: string;
};

export type DeleteMenuCategoryParams = {
  id?: number;
  key: string;
};

export type PostMenuCategoryParams = {
  Key: string;
  Language: string;
};

export type PostMenuItemsBody = {
  files?: Blob[];
  menuItemsJson?: string;
};

export type PostMenuItemsParams = {
  Key: string;
  Language: string;
};

export type DeleteCustomerDomainParams = {
  key: string;
};

export type PostCustomerDomainParams = {
  key: string;
  domainName?: string;
};

export type PostCustomerLanguagesBody = {
  DefaultLanguage?: string;
  Languages?: string[];
};

export type PostCustomerLanguagesParams = {
  Key: string;
  Language: string;
};

export type PostCustomerSiteConfigurationAssetsBody = {
  Font?: Blob;
  Logo?: Blob;
};

export type PostCustomerSiteConfigurationAssetsParams = {
  Key: string;
  Language: string;
};

export type PostCustomerSiteConfigurationBody = {
  Adress?: string;
  ContactFormVisible?: boolean;
  Currency?: string;
  Email?: string;
  FacebookUrl?: string;
  Font?: string;
  InstagramUrl?: string;
  Logo?: string;
  MapUrl?: string;
  Phone?: string;
  SiteMetaTitle?: string;
  SiteName?: string;
  Theme?: string;
  ThemeColorConfig?: string;
  TiktokUrl?: string;
};

export type PostCustomerSiteConfigurationParams = {
  Key: string;
  Language: string;
};

export type DeleteCustomerConfigParams = {
  key: string;
};

export type SubscriptionState =
  (typeof SubscriptionState)[keyof typeof SubscriptionState];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SubscriptionState = {
  NUMBER_0: 0,
  NUMBER_1: 1,
} as const;

export interface SiteTranslationsResponse {
  aboutTitle?: string;
  allRightsReserved?: string;
  closed?: string;
  contactUs?: string;
  friday?: string;
  gallery?: string;
  menu?: string;
  monday?: string;
  openHours?: string;
  orderNow?: string;
  saturday?: string;
  sunday?: string;
  thursday?: string;
  tuesday?: string;
  wednesday?: string;
}

export interface SiteSectionHeroResponse {
  heroImage?: string;
  orderUrl?: string;
}

export interface SiteSectionGalleryResponse {
  id?: number;
  image?: string;
}

export interface SiteSectionAboutResponse {
  aboutTitle?: string;
  description?: string;
  image?: string;
}

export interface SectionsResponse {
  about?: SiteSectionAboutResponse;
  gallery?: SiteSectionGalleryResponse[];
  hero?: SiteSectionHeroResponse;
}

export interface SectionVisibilityResponse {
  contactFormVisible?: boolean;
}

export interface OpeningHourResponse {
  closeTime?: string;
  day?: CustomDayOfWeek;
  id?: number;
  isClosed?: boolean;
  /** @nullable */
  label?: string | null;
  openTime?: string;
}

export interface MenuItemResponse {
  categoryId: number;
  /** @minLength 1 */
  description: string;
  id: number;
  /** @nullable */
  image?: string | null;
  /** @minLength 1 */
  name: string;
  order: number;
  price: number;
  /** @nullable */
  tags?: string | null;
}

export interface MenuCategoryResponse {
  /** @minLength 1 */
  description: string;
  id: number;
  /** @minLength 1 */
  name: string;
  order: number;
}

export interface MenuResponse {
  categories: MenuCategoryResponse[];
  menuItems: MenuItemResponse[];
}

export interface CustomerResponse {
  cancelInfo?: CancelInfo;
  customerConfigs?: CustomerConfigResponse[];
  domain?: string;
  isFirstSignIn?: boolean;
  subscription?: SubscriptionState;
}

export interface CustomerConfigTranslations {
  siteTranslations?: SiteTranslationsResponse;
}

export interface CustomerConfigResponse {
  /** @nullable */
  adress?: string | null;
  availableLanguages?: string[];
  currency?: string;
  /** @nullable */
  customDomain?: string | null;
  defaultLanguage?: string;
  domain?: string;
  /** @nullable */
  email?: string | null;
  /** @nullable */
  facebookUrl?: string | null;
  /** @nullable */
  font?: string | null;
  heroType?: number;
  /** @nullable */
  instagramUrl?: string | null;
  languages?: string[];
  logo?: string;
  /** @nullable */
  mapUrl?: string | null;
  openingHours?: OpeningHourResponse[];
  /** @nullable */
  phone?: string | null;
  sections?: SectionsResponse;
  sectionVisibility?: SectionVisibilityResponse;
  siteMetaTitle?: string;
  siteName?: string;
  siteTranslations?: SiteTranslationsResponse;
  theme?: string;
  /** @nullable */
  themeColorConfig?: string | null;
  /** @nullable */
  tiktokUrl?: string | null;
}

export interface CustomerConfigMetaResponse {
  currency?: string;
  defaultLanguage?: string;
  domain?: string;
  languages?: string[];
  siteName?: string;
}

export type CustomDayOfWeek =
  (typeof CustomDayOfWeek)[keyof typeof CustomDayOfWeek];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CustomDayOfWeek = {
  NUMBER_0: 0,
  NUMBER_1: 1,
  NUMBER_2: 2,
  NUMBER_3: 3,
  NUMBER_4: 4,
  NUMBER_5: 5,
  NUMBER_6: 6,
  NUMBER_7: 7,
} as const;

export interface CreateConfigRequest {
  domain?: string;
}

export interface ContactRequest {
  description?: string;
  email?: string;
  name?: string;
}

export interface CancelInfo {
  isCanceled?: boolean;
  isExpired?: boolean;
  /** @nullable */
  periodEnd?: string | null;
}

export interface AddOpeningHourRequest {
  closeTime?: string;
  id?: number;
  isClosed?: boolean;
  /** @nullable */
  label?: string | null;
  openTime?: string;
}

export interface AddCategoryRequest {
  /** @nullable */
  description?: string | null;
  id?: number;
  name?: string;
  /** @nullable */
  order?: number | null;
}

export const getCustomerCustomer = (signal?: AbortSignal) => {
  return authorizedFetch<CustomerResponse>({
    url: `/Customer/customer`,
    method: "GET",
    signal,
  });
};

export const getGetCustomerCustomerQueryKey = () => {
  return [`/Customer/customer`] as const;
};

export const getGetCustomerCustomerQueryOptions = <
  TData = Awaited<ReturnType<typeof getCustomerCustomer>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getCustomerCustomer>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCustomerCustomerQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getCustomerCustomer>>
  > = ({ signal }) => getCustomerCustomer(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCustomerCustomer>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetCustomerCustomerQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCustomerCustomer>>
>;
export type GetCustomerCustomerQueryError = unknown;

export function useGetCustomerCustomer<
  TData = Awaited<ReturnType<typeof getCustomerCustomer>>,
  TError = unknown,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getCustomerCustomer>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getCustomerCustomer>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetCustomerCustomer<
  TData = Awaited<ReturnType<typeof getCustomerCustomer>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getCustomerCustomer>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getCustomerCustomer>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetCustomerCustomer<
  TData = Awaited<ReturnType<typeof getCustomerCustomer>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getCustomerCustomer>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetCustomerCustomer<
  TData = Awaited<ReturnType<typeof getCustomerCustomer>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getCustomerCustomer>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetCustomerCustomerQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const putCustomerConfig = (createConfigRequest: CreateConfigRequest) => {
  return authorizedFetch<void>({
    url: `/Customer/config`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: createConfigRequest,
  });
};

export const getPutCustomerConfigMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putCustomerConfig>>,
    TError,
    { data: CreateConfigRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putCustomerConfig>>,
  TError,
  { data: CreateConfigRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putCustomerConfig>>,
    { data: CreateConfigRequest }
  > = (props) => {
    const { data } = props ?? {};

    return putCustomerConfig(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutCustomerConfigMutationResult = NonNullable<
  Awaited<ReturnType<typeof putCustomerConfig>>
>;
export type PutCustomerConfigMutationBody = CreateConfigRequest;
export type PutCustomerConfigMutationError = unknown;

export const usePutCustomerConfig = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putCustomerConfig>>,
    TError,
    { data: CreateConfigRequest },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putCustomerConfig>>,
  TError,
  { data: CreateConfigRequest },
  TContext
> => {
  const mutationOptions = getPutCustomerConfigMutationOptions(options);

  return useMutation(mutationOptions);
};

export const deleteCustomerConfig = (params: DeleteCustomerConfigParams) => {
  return authorizedFetch<void>({
    url: `/Customer/config`,
    method: "DELETE",
    params,
  });
};

export const getDeleteCustomerConfigMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteCustomerConfig>>,
    TError,
    { params: DeleteCustomerConfigParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteCustomerConfig>>,
  TError,
  { params: DeleteCustomerConfigParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteCustomerConfig>>,
    { params: DeleteCustomerConfigParams }
  > = (props) => {
    const { params } = props ?? {};

    return deleteCustomerConfig(params);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteCustomerConfigMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteCustomerConfig>>
>;

export type DeleteCustomerConfigMutationError = unknown;

export const useDeleteCustomerConfig = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteCustomerConfig>>,
    TError,
    { params: DeleteCustomerConfigParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteCustomerConfig>>,
  TError,
  { params: DeleteCustomerConfigParams },
  TContext
> => {
  const mutationOptions = getDeleteCustomerConfigMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postCustomerSiteConfiguration = (
  postCustomerSiteConfigurationBody: PostCustomerSiteConfigurationBody,
  params: PostCustomerSiteConfigurationParams,
  signal?: AbortSignal,
) => {
  const formData = new FormData();
  if (postCustomerSiteConfigurationBody.SiteName !== undefined) {
    formData.append("SiteName", postCustomerSiteConfigurationBody.SiteName);
  }
  if (postCustomerSiteConfigurationBody.SiteMetaTitle !== undefined) {
    formData.append(
      "SiteMetaTitle",
      postCustomerSiteConfigurationBody.SiteMetaTitle,
    );
  }
  if (postCustomerSiteConfigurationBody.Theme !== undefined) {
    formData.append("Theme", postCustomerSiteConfigurationBody.Theme);
  }
  if (postCustomerSiteConfigurationBody.Currency !== undefined) {
    formData.append("Currency", postCustomerSiteConfigurationBody.Currency);
  }
  if (postCustomerSiteConfigurationBody.ContactFormVisible !== undefined) {
    formData.append(
      "ContactFormVisible",
      postCustomerSiteConfigurationBody.ContactFormVisible.toString(),
    );
  }
  if (postCustomerSiteConfigurationBody.Logo !== undefined) {
    formData.append("Logo", postCustomerSiteConfigurationBody.Logo);
  }
  if (postCustomerSiteConfigurationBody.Font !== undefined) {
    formData.append("Font", postCustomerSiteConfigurationBody.Font);
  }
  if (postCustomerSiteConfigurationBody.Adress !== undefined) {
    formData.append("Adress", postCustomerSiteConfigurationBody.Adress);
  }
  if (postCustomerSiteConfigurationBody.Phone !== undefined) {
    formData.append("Phone", postCustomerSiteConfigurationBody.Phone);
  }
  if (postCustomerSiteConfigurationBody.Email !== undefined) {
    formData.append("Email", postCustomerSiteConfigurationBody.Email);
  }
  if (postCustomerSiteConfigurationBody.InstagramUrl !== undefined) {
    formData.append(
      "InstagramUrl",
      postCustomerSiteConfigurationBody.InstagramUrl,
    );
  }
  if (postCustomerSiteConfigurationBody.TiktokUrl !== undefined) {
    formData.append("TiktokUrl", postCustomerSiteConfigurationBody.TiktokUrl);
  }
  if (postCustomerSiteConfigurationBody.FacebookUrl !== undefined) {
    formData.append(
      "FacebookUrl",
      postCustomerSiteConfigurationBody.FacebookUrl,
    );
  }
  if (postCustomerSiteConfigurationBody.MapUrl !== undefined) {
    formData.append("MapUrl", postCustomerSiteConfigurationBody.MapUrl);
  }
  if (postCustomerSiteConfigurationBody.ThemeColorConfig !== undefined) {
    formData.append(
      "ThemeColorConfig",
      postCustomerSiteConfigurationBody.ThemeColorConfig,
    );
  }

  return authorizedFetch<void>({
    url: `/Customer/site-configuration`,
    method: "POST",
    headers: { "Content-Type": "multipart/form-data" },
    data: formData,
    params,
    signal,
  });
};

export const getPostCustomerSiteConfigurationMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postCustomerSiteConfiguration>>,
    TError,
    {
      data: PostCustomerSiteConfigurationBody;
      params: PostCustomerSiteConfigurationParams;
    },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postCustomerSiteConfiguration>>,
  TError,
  {
    data: PostCustomerSiteConfigurationBody;
    params: PostCustomerSiteConfigurationParams;
  },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postCustomerSiteConfiguration>>,
    {
      data: PostCustomerSiteConfigurationBody;
      params: PostCustomerSiteConfigurationParams;
    }
  > = (props) => {
    const { data, params } = props ?? {};

    return postCustomerSiteConfiguration(data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostCustomerSiteConfigurationMutationResult = NonNullable<
  Awaited<ReturnType<typeof postCustomerSiteConfiguration>>
>;
export type PostCustomerSiteConfigurationMutationBody =
  PostCustomerSiteConfigurationBody;
export type PostCustomerSiteConfigurationMutationError = unknown;

export const usePostCustomerSiteConfiguration = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postCustomerSiteConfiguration>>,
    TError,
    {
      data: PostCustomerSiteConfigurationBody;
      params: PostCustomerSiteConfigurationParams;
    },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postCustomerSiteConfiguration>>,
  TError,
  {
    data: PostCustomerSiteConfigurationBody;
    params: PostCustomerSiteConfigurationParams;
  },
  TContext
> => {
  const mutationOptions =
    getPostCustomerSiteConfigurationMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postCustomerSiteConfigurationAssets = (
  postCustomerSiteConfigurationAssetsBody: PostCustomerSiteConfigurationAssetsBody,
  params: PostCustomerSiteConfigurationAssetsParams,
  signal?: AbortSignal,
) => {
  const formData = new FormData();
  if (postCustomerSiteConfigurationAssetsBody.Logo !== undefined) {
    formData.append("Logo", postCustomerSiteConfigurationAssetsBody.Logo);
  }
  if (postCustomerSiteConfigurationAssetsBody.Font !== undefined) {
    formData.append("Font", postCustomerSiteConfigurationAssetsBody.Font);
  }

  return authorizedFetch<void>({
    url: `/Customer/site-configuration-assets`,
    method: "POST",
    headers: { "Content-Type": "multipart/form-data" },
    data: formData,
    params,
    signal,
  });
};

export const getPostCustomerSiteConfigurationAssetsMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postCustomerSiteConfigurationAssets>>,
    TError,
    {
      data: PostCustomerSiteConfigurationAssetsBody;
      params: PostCustomerSiteConfigurationAssetsParams;
    },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postCustomerSiteConfigurationAssets>>,
  TError,
  {
    data: PostCustomerSiteConfigurationAssetsBody;
    params: PostCustomerSiteConfigurationAssetsParams;
  },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postCustomerSiteConfigurationAssets>>,
    {
      data: PostCustomerSiteConfigurationAssetsBody;
      params: PostCustomerSiteConfigurationAssetsParams;
    }
  > = (props) => {
    const { data, params } = props ?? {};

    return postCustomerSiteConfigurationAssets(data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostCustomerSiteConfigurationAssetsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postCustomerSiteConfigurationAssets>>
>;
export type PostCustomerSiteConfigurationAssetsMutationBody =
  PostCustomerSiteConfigurationAssetsBody;
export type PostCustomerSiteConfigurationAssetsMutationError = unknown;

export const usePostCustomerSiteConfigurationAssets = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postCustomerSiteConfigurationAssets>>,
    TError,
    {
      data: PostCustomerSiteConfigurationAssetsBody;
      params: PostCustomerSiteConfigurationAssetsParams;
    },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postCustomerSiteConfigurationAssets>>,
  TError,
  {
    data: PostCustomerSiteConfigurationAssetsBody;
    params: PostCustomerSiteConfigurationAssetsParams;
  },
  TContext
> => {
  const mutationOptions =
    getPostCustomerSiteConfigurationAssetsMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postCustomerLanguages = (
  postCustomerLanguagesBody: PostCustomerLanguagesBody,
  params: PostCustomerLanguagesParams,
  signal?: AbortSignal,
) => {
  const formData = new FormData();
  if (postCustomerLanguagesBody.Languages !== undefined) {
    postCustomerLanguagesBody.Languages.forEach((value) =>
      formData.append("Languages", value),
    );
  }
  if (postCustomerLanguagesBody.DefaultLanguage !== undefined) {
    formData.append(
      "DefaultLanguage",
      postCustomerLanguagesBody.DefaultLanguage,
    );
  }

  return authorizedFetch<void>({
    url: `/Customer/languages`,
    method: "POST",
    headers: { "Content-Type": "multipart/form-data" },
    data: formData,
    params,
    signal,
  });
};

export const getPostCustomerLanguagesMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postCustomerLanguages>>,
    TError,
    { data: PostCustomerLanguagesBody; params: PostCustomerLanguagesParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postCustomerLanguages>>,
  TError,
  { data: PostCustomerLanguagesBody; params: PostCustomerLanguagesParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postCustomerLanguages>>,
    { data: PostCustomerLanguagesBody; params: PostCustomerLanguagesParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return postCustomerLanguages(data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostCustomerLanguagesMutationResult = NonNullable<
  Awaited<ReturnType<typeof postCustomerLanguages>>
>;
export type PostCustomerLanguagesMutationBody = PostCustomerLanguagesBody;
export type PostCustomerLanguagesMutationError = unknown;

export const usePostCustomerLanguages = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postCustomerLanguages>>,
    TError,
    { data: PostCustomerLanguagesBody; params: PostCustomerLanguagesParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postCustomerLanguages>>,
  TError,
  { data: PostCustomerLanguagesBody; params: PostCustomerLanguagesParams },
  TContext
> => {
  const mutationOptions = getPostCustomerLanguagesMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postCustomerDomain = (
  params: PostCustomerDomainParams,
  signal?: AbortSignal,
) => {
  return authorizedFetch<void>({
    url: `/Customer/domain`,
    method: "POST",
    params,
    signal,
  });
};

export const getPostCustomerDomainMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postCustomerDomain>>,
    TError,
    { params: PostCustomerDomainParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postCustomerDomain>>,
  TError,
  { params: PostCustomerDomainParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postCustomerDomain>>,
    { params: PostCustomerDomainParams }
  > = (props) => {
    const { params } = props ?? {};

    return postCustomerDomain(params);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostCustomerDomainMutationResult = NonNullable<
  Awaited<ReturnType<typeof postCustomerDomain>>
>;

export type PostCustomerDomainMutationError = unknown;

export const usePostCustomerDomain = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postCustomerDomain>>,
    TError,
    { params: PostCustomerDomainParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postCustomerDomain>>,
  TError,
  { params: PostCustomerDomainParams },
  TContext
> => {
  const mutationOptions = getPostCustomerDomainMutationOptions(options);

  return useMutation(mutationOptions);
};

export const deleteCustomerDomain = (params: DeleteCustomerDomainParams) => {
  return authorizedFetch<void>({
    url: `/Customer/domain`,
    method: "DELETE",
    params,
  });
};

export const getDeleteCustomerDomainMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteCustomerDomain>>,
    TError,
    { params: DeleteCustomerDomainParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteCustomerDomain>>,
  TError,
  { params: DeleteCustomerDomainParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteCustomerDomain>>,
    { params: DeleteCustomerDomainParams }
  > = (props) => {
    const { params } = props ?? {};

    return deleteCustomerDomain(params);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteCustomerDomainMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteCustomerDomain>>
>;

export type DeleteCustomerDomainMutationError = unknown;

export const useDeleteCustomerDomain = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteCustomerDomain>>,
    TError,
    { params: DeleteCustomerDomainParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteCustomerDomain>>,
  TError,
  { params: DeleteCustomerDomainParams },
  TContext
> => {
  const mutationOptions = getDeleteCustomerDomainMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postMenuItems = (
  postMenuItemsBody: PostMenuItemsBody,
  params: PostMenuItemsParams,
  signal?: AbortSignal,
) => {
  const formData = new FormData();
  if (postMenuItemsBody.menuItemsJson !== undefined) {
    formData.append("menuItemsJson", postMenuItemsBody.menuItemsJson);
  }
  if (postMenuItemsBody.files !== undefined) {
    postMenuItemsBody.files.forEach((value) => formData.append("files", value));
  }

  return authorizedFetch<void>({
    url: `/Menu/items`,
    method: "POST",
    headers: { "Content-Type": "multipart/form-data" },
    data: formData,
    params,
    signal,
  });
};

export const getPostMenuItemsMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postMenuItems>>,
    TError,
    { data: PostMenuItemsBody; params: PostMenuItemsParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postMenuItems>>,
  TError,
  { data: PostMenuItemsBody; params: PostMenuItemsParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postMenuItems>>,
    { data: PostMenuItemsBody; params: PostMenuItemsParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return postMenuItems(data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostMenuItemsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postMenuItems>>
>;
export type PostMenuItemsMutationBody = PostMenuItemsBody;
export type PostMenuItemsMutationError = unknown;

export const usePostMenuItems = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postMenuItems>>,
    TError,
    { data: PostMenuItemsBody; params: PostMenuItemsParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postMenuItems>>,
  TError,
  { data: PostMenuItemsBody; params: PostMenuItemsParams },
  TContext
> => {
  const mutationOptions = getPostMenuItemsMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postMenuCategory = (
  addCategoryRequest: AddCategoryRequest,
  params: PostMenuCategoryParams,
  signal?: AbortSignal,
) => {
  return authorizedFetch<void>({
    url: `/Menu/category`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: addCategoryRequest,
    params,
    signal,
  });
};

export const getPostMenuCategoryMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postMenuCategory>>,
    TError,
    { data: AddCategoryRequest; params: PostMenuCategoryParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postMenuCategory>>,
  TError,
  { data: AddCategoryRequest; params: PostMenuCategoryParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postMenuCategory>>,
    { data: AddCategoryRequest; params: PostMenuCategoryParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return postMenuCategory(data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostMenuCategoryMutationResult = NonNullable<
  Awaited<ReturnType<typeof postMenuCategory>>
>;
export type PostMenuCategoryMutationBody = AddCategoryRequest;
export type PostMenuCategoryMutationError = unknown;

export const usePostMenuCategory = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postMenuCategory>>,
    TError,
    { data: AddCategoryRequest; params: PostMenuCategoryParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postMenuCategory>>,
  TError,
  { data: AddCategoryRequest; params: PostMenuCategoryParams },
  TContext
> => {
  const mutationOptions = getPostMenuCategoryMutationOptions(options);

  return useMutation(mutationOptions);
};

export const deleteMenuCategory = (params: DeleteMenuCategoryParams) => {
  return authorizedFetch<void>({
    url: `/Menu/category`,
    method: "DELETE",
    params,
  });
};

export const getDeleteMenuCategoryMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteMenuCategory>>,
    TError,
    { params: DeleteMenuCategoryParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteMenuCategory>>,
  TError,
  { params: DeleteMenuCategoryParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteMenuCategory>>,
    { params: DeleteMenuCategoryParams }
  > = (props) => {
    const { params } = props ?? {};

    return deleteMenuCategory(params);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteMenuCategoryMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteMenuCategory>>
>;

export type DeleteMenuCategoryMutationError = unknown;

export const useDeleteMenuCategory = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteMenuCategory>>,
    TError,
    { params: DeleteMenuCategoryParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteMenuCategory>>,
  TError,
  { params: DeleteMenuCategoryParams },
  TContext
> => {
  const mutationOptions = getDeleteMenuCategoryMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postMenuCategoryOrder = (
  addCategoryRequest: AddCategoryRequest[],
  params: PostMenuCategoryOrderParams,
  signal?: AbortSignal,
) => {
  return authorizedFetch<void>({
    url: `/Menu/category/order`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: addCategoryRequest,
    params,
    signal,
  });
};

export const getPostMenuCategoryOrderMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postMenuCategoryOrder>>,
    TError,
    { data: AddCategoryRequest[]; params: PostMenuCategoryOrderParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postMenuCategoryOrder>>,
  TError,
  { data: AddCategoryRequest[]; params: PostMenuCategoryOrderParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postMenuCategoryOrder>>,
    { data: AddCategoryRequest[]; params: PostMenuCategoryOrderParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return postMenuCategoryOrder(data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostMenuCategoryOrderMutationResult = NonNullable<
  Awaited<ReturnType<typeof postMenuCategoryOrder>>
>;
export type PostMenuCategoryOrderMutationBody = AddCategoryRequest[];
export type PostMenuCategoryOrderMutationError = unknown;

export const usePostMenuCategoryOrder = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postMenuCategoryOrder>>,
    TError,
    { data: AddCategoryRequest[]; params: PostMenuCategoryOrderParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postMenuCategoryOrder>>,
  TError,
  { data: AddCategoryRequest[]; params: PostMenuCategoryOrderParams },
  TContext
> => {
  const mutationOptions = getPostMenuCategoryOrderMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postMenuImportqoplamenu = (
  params?: PostMenuImportqoplamenuParams,
  signal?: AbortSignal,
) => {
  return authorizedFetch<void>({
    url: `/Menu/importqoplamenu`,
    method: "POST",
    params,
    signal,
  });
};

export const getPostMenuImportqoplamenuMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postMenuImportqoplamenu>>,
    TError,
    { params?: PostMenuImportqoplamenuParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postMenuImportqoplamenu>>,
  TError,
  { params?: PostMenuImportqoplamenuParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postMenuImportqoplamenu>>,
    { params?: PostMenuImportqoplamenuParams }
  > = (props) => {
    const { params } = props ?? {};

    return postMenuImportqoplamenu(params);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostMenuImportqoplamenuMutationResult = NonNullable<
  Awaited<ReturnType<typeof postMenuImportqoplamenu>>
>;

export type PostMenuImportqoplamenuMutationError = unknown;

export const usePostMenuImportqoplamenu = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postMenuImportqoplamenu>>,
    TError,
    { params?: PostMenuImportqoplamenuParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postMenuImportqoplamenu>>,
  TError,
  { params?: PostMenuImportqoplamenuParams },
  TContext
> => {
  const mutationOptions = getPostMenuImportqoplamenuMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getOpeningHour = (
  params: GetOpeningHourParams,
  signal?: AbortSignal,
) => {
  return authorizedFetch<OpeningHourResponse[]>({
    url: `/OpeningHour`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetOpeningHourQueryKey = (params: GetOpeningHourParams) => {
  return [`/OpeningHour`, ...(params ? [params] : [])] as const;
};

export const getGetOpeningHourQueryOptions = <
  TData = Awaited<ReturnType<typeof getOpeningHour>>,
  TError = unknown,
>(
  params: GetOpeningHourParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getOpeningHour>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetOpeningHourQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getOpeningHour>>> = ({
    signal,
  }) => getOpeningHour(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getOpeningHour>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetOpeningHourQueryResult = NonNullable<
  Awaited<ReturnType<typeof getOpeningHour>>
>;
export type GetOpeningHourQueryError = unknown;

export function useGetOpeningHour<
  TData = Awaited<ReturnType<typeof getOpeningHour>>,
  TError = unknown,
>(
  params: GetOpeningHourParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getOpeningHour>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOpeningHour>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetOpeningHour<
  TData = Awaited<ReturnType<typeof getOpeningHour>>,
  TError = unknown,
>(
  params: GetOpeningHourParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getOpeningHour>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOpeningHour>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetOpeningHour<
  TData = Awaited<ReturnType<typeof getOpeningHour>>,
  TError = unknown,
>(
  params: GetOpeningHourParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getOpeningHour>>, TError, TData>
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetOpeningHour<
  TData = Awaited<ReturnType<typeof getOpeningHour>>,
  TError = unknown,
>(
  params: GetOpeningHourParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getOpeningHour>>, TError, TData>
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetOpeningHourQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postOpeningHour = (
  addOpeningHourRequest: AddOpeningHourRequest[],
  params: PostOpeningHourParams,
  signal?: AbortSignal,
) => {
  return authorizedFetch<void>({
    url: `/OpeningHour`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: addOpeningHourRequest,
    params,
    signal,
  });
};

export const getPostOpeningHourMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postOpeningHour>>,
    TError,
    { data: AddOpeningHourRequest[]; params: PostOpeningHourParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postOpeningHour>>,
  TError,
  { data: AddOpeningHourRequest[]; params: PostOpeningHourParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postOpeningHour>>,
    { data: AddOpeningHourRequest[]; params: PostOpeningHourParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return postOpeningHour(data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostOpeningHourMutationResult = NonNullable<
  Awaited<ReturnType<typeof postOpeningHour>>
>;
export type PostOpeningHourMutationBody = AddOpeningHourRequest[];
export type PostOpeningHourMutationError = unknown;

export const usePostOpeningHour = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postOpeningHour>>,
    TError,
    { data: AddOpeningHourRequest[]; params: PostOpeningHourParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postOpeningHour>>,
  TError,
  { data: AddOpeningHourRequest[]; params: PostOpeningHourParams },
  TContext
> => {
  const mutationOptions = getPostOpeningHourMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getPublicGetCustomerConfigMeta = (
  params: GetPublicGetCustomerConfigMetaParams,
  signal?: AbortSignal,
) => {
  return authorizedFetch<CustomerConfigMetaResponse>({
    url: `/Public/get-customer-config-meta`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetPublicGetCustomerConfigMetaQueryKey = (
  params: GetPublicGetCustomerConfigMetaParams,
) => {
  return [
    `/Public/get-customer-config-meta`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetPublicGetCustomerConfigMetaQueryOptions = <
  TData = Awaited<ReturnType<typeof getPublicGetCustomerConfigMeta>>,
  TError = unknown,
>(
  params: GetPublicGetCustomerConfigMetaParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPublicGetCustomerConfigMeta>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetPublicGetCustomerConfigMetaQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getPublicGetCustomerConfigMeta>>
  > = ({ signal }) => getPublicGetCustomerConfigMeta(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPublicGetCustomerConfigMeta>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetPublicGetCustomerConfigMetaQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPublicGetCustomerConfigMeta>>
>;
export type GetPublicGetCustomerConfigMetaQueryError = unknown;

export function useGetPublicGetCustomerConfigMeta<
  TData = Awaited<ReturnType<typeof getPublicGetCustomerConfigMeta>>,
  TError = unknown,
>(
  params: GetPublicGetCustomerConfigMetaParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPublicGetCustomerConfigMeta>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPublicGetCustomerConfigMeta>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetPublicGetCustomerConfigMeta<
  TData = Awaited<ReturnType<typeof getPublicGetCustomerConfigMeta>>,
  TError = unknown,
>(
  params: GetPublicGetCustomerConfigMetaParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPublicGetCustomerConfigMeta>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPublicGetCustomerConfigMeta>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetPublicGetCustomerConfigMeta<
  TData = Awaited<ReturnType<typeof getPublicGetCustomerConfigMeta>>,
  TError = unknown,
>(
  params: GetPublicGetCustomerConfigMetaParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPublicGetCustomerConfigMeta>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetPublicGetCustomerConfigMeta<
  TData = Awaited<ReturnType<typeof getPublicGetCustomerConfigMeta>>,
  TError = unknown,
>(
  params: GetPublicGetCustomerConfigMetaParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPublicGetCustomerConfigMeta>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetPublicGetCustomerConfigMetaQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getPublicAbout = (
  params: GetPublicAboutParams,
  signal?: AbortSignal,
) => {
  return authorizedFetch<SiteSectionAboutResponse>({
    url: `/Public/about`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetPublicAboutQueryKey = (params: GetPublicAboutParams) => {
  return [`/Public/about`, ...(params ? [params] : [])] as const;
};

export const getGetPublicAboutQueryOptions = <
  TData = Awaited<ReturnType<typeof getPublicAbout>>,
  TError = unknown,
>(
  params: GetPublicAboutParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPublicAbout>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetPublicAboutQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPublicAbout>>> = ({
    signal,
  }) => getPublicAbout(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPublicAbout>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetPublicAboutQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPublicAbout>>
>;
export type GetPublicAboutQueryError = unknown;

export function useGetPublicAbout<
  TData = Awaited<ReturnType<typeof getPublicAbout>>,
  TError = unknown,
>(
  params: GetPublicAboutParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPublicAbout>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPublicAbout>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetPublicAbout<
  TData = Awaited<ReturnType<typeof getPublicAbout>>,
  TError = unknown,
>(
  params: GetPublicAboutParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPublicAbout>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPublicAbout>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetPublicAbout<
  TData = Awaited<ReturnType<typeof getPublicAbout>>,
  TError = unknown,
>(
  params: GetPublicAboutParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPublicAbout>>, TError, TData>
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetPublicAbout<
  TData = Awaited<ReturnType<typeof getPublicAbout>>,
  TError = unknown,
>(
  params: GetPublicAboutParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPublicAbout>>, TError, TData>
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetPublicAboutQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getPublicGetCustomerTranslations = (
  params: GetPublicGetCustomerTranslationsParams,
  signal?: AbortSignal,
) => {
  return authorizedFetch<CustomerConfigTranslations>({
    url: `/Public/get-customer-translations`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetPublicGetCustomerTranslationsQueryKey = (
  params: GetPublicGetCustomerTranslationsParams,
) => {
  return [
    `/Public/get-customer-translations`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetPublicGetCustomerTranslationsQueryOptions = <
  TData = Awaited<ReturnType<typeof getPublicGetCustomerTranslations>>,
  TError = unknown,
>(
  params: GetPublicGetCustomerTranslationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPublicGetCustomerTranslations>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetPublicGetCustomerTranslationsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getPublicGetCustomerTranslations>>
  > = ({ signal }) => getPublicGetCustomerTranslations(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPublicGetCustomerTranslations>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetPublicGetCustomerTranslationsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPublicGetCustomerTranslations>>
>;
export type GetPublicGetCustomerTranslationsQueryError = unknown;

export function useGetPublicGetCustomerTranslations<
  TData = Awaited<ReturnType<typeof getPublicGetCustomerTranslations>>,
  TError = unknown,
>(
  params: GetPublicGetCustomerTranslationsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPublicGetCustomerTranslations>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPublicGetCustomerTranslations>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetPublicGetCustomerTranslations<
  TData = Awaited<ReturnType<typeof getPublicGetCustomerTranslations>>,
  TError = unknown,
>(
  params: GetPublicGetCustomerTranslationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPublicGetCustomerTranslations>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPublicGetCustomerTranslations>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetPublicGetCustomerTranslations<
  TData = Awaited<ReturnType<typeof getPublicGetCustomerTranslations>>,
  TError = unknown,
>(
  params: GetPublicGetCustomerTranslationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPublicGetCustomerTranslations>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetPublicGetCustomerTranslations<
  TData = Awaited<ReturnType<typeof getPublicGetCustomerTranslations>>,
  TError = unknown,
>(
  params: GetPublicGetCustomerTranslationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPublicGetCustomerTranslations>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetPublicGetCustomerTranslationsQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getPublicGetCustomerConfig = (
  params: GetPublicGetCustomerConfigParams,
  signal?: AbortSignal,
) => {
  return authorizedFetch<CustomerConfigResponse>({
    url: `/Public/get-customer-config`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetPublicGetCustomerConfigQueryKey = (
  params: GetPublicGetCustomerConfigParams,
) => {
  return [`/Public/get-customer-config`, ...(params ? [params] : [])] as const;
};

export const getGetPublicGetCustomerConfigQueryOptions = <
  TData = Awaited<ReturnType<typeof getPublicGetCustomerConfig>>,
  TError = unknown,
>(
  params: GetPublicGetCustomerConfigParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPublicGetCustomerConfig>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetPublicGetCustomerConfigQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getPublicGetCustomerConfig>>
  > = ({ signal }) => getPublicGetCustomerConfig(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPublicGetCustomerConfig>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetPublicGetCustomerConfigQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPublicGetCustomerConfig>>
>;
export type GetPublicGetCustomerConfigQueryError = unknown;

export function useGetPublicGetCustomerConfig<
  TData = Awaited<ReturnType<typeof getPublicGetCustomerConfig>>,
  TError = unknown,
>(
  params: GetPublicGetCustomerConfigParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPublicGetCustomerConfig>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPublicGetCustomerConfig>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetPublicGetCustomerConfig<
  TData = Awaited<ReturnType<typeof getPublicGetCustomerConfig>>,
  TError = unknown,
>(
  params: GetPublicGetCustomerConfigParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPublicGetCustomerConfig>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPublicGetCustomerConfig>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetPublicGetCustomerConfig<
  TData = Awaited<ReturnType<typeof getPublicGetCustomerConfig>>,
  TError = unknown,
>(
  params: GetPublicGetCustomerConfigParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPublicGetCustomerConfig>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetPublicGetCustomerConfig<
  TData = Awaited<ReturnType<typeof getPublicGetCustomerConfig>>,
  TError = unknown,
>(
  params: GetPublicGetCustomerConfigParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPublicGetCustomerConfig>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetPublicGetCustomerConfigQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getPublicGetCustomerMenu = (
  params: GetPublicGetCustomerMenuParams,
  signal?: AbortSignal,
) => {
  return authorizedFetch<MenuResponse>({
    url: `/Public/get-customer-menu`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetPublicGetCustomerMenuQueryKey = (
  params: GetPublicGetCustomerMenuParams,
) => {
  return [`/Public/get-customer-menu`, ...(params ? [params] : [])] as const;
};

export const getGetPublicGetCustomerMenuQueryOptions = <
  TData = Awaited<ReturnType<typeof getPublicGetCustomerMenu>>,
  TError = unknown,
>(
  params: GetPublicGetCustomerMenuParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPublicGetCustomerMenu>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetPublicGetCustomerMenuQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getPublicGetCustomerMenu>>
  > = ({ signal }) => getPublicGetCustomerMenu(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPublicGetCustomerMenu>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetPublicGetCustomerMenuQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPublicGetCustomerMenu>>
>;
export type GetPublicGetCustomerMenuQueryError = unknown;

export function useGetPublicGetCustomerMenu<
  TData = Awaited<ReturnType<typeof getPublicGetCustomerMenu>>,
  TError = unknown,
>(
  params: GetPublicGetCustomerMenuParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPublicGetCustomerMenu>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPublicGetCustomerMenu>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetPublicGetCustomerMenu<
  TData = Awaited<ReturnType<typeof getPublicGetCustomerMenu>>,
  TError = unknown,
>(
  params: GetPublicGetCustomerMenuParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPublicGetCustomerMenu>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPublicGetCustomerMenu>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetPublicGetCustomerMenu<
  TData = Awaited<ReturnType<typeof getPublicGetCustomerMenu>>,
  TError = unknown,
>(
  params: GetPublicGetCustomerMenuParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPublicGetCustomerMenu>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetPublicGetCustomerMenu<
  TData = Awaited<ReturnType<typeof getPublicGetCustomerMenu>>,
  TError = unknown,
>(
  params: GetPublicGetCustomerMenuParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPublicGetCustomerMenu>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetPublicGetCustomerMenuQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postPublicContact = (
  contactRequest: ContactRequest,
  params: PostPublicContactParams,
  signal?: AbortSignal,
) => {
  return authorizedFetch<void>({
    url: `/Public/contact`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: contactRequest,
    params,
    signal,
  });
};

export const getPostPublicContactMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postPublicContact>>,
    TError,
    { data: ContactRequest; params: PostPublicContactParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postPublicContact>>,
  TError,
  { data: ContactRequest; params: PostPublicContactParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postPublicContact>>,
    { data: ContactRequest; params: PostPublicContactParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return postPublicContact(data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostPublicContactMutationResult = NonNullable<
  Awaited<ReturnType<typeof postPublicContact>>
>;
export type PostPublicContactMutationBody = ContactRequest;
export type PostPublicContactMutationError = unknown;

export const usePostPublicContact = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postPublicContact>>,
    TError,
    { data: ContactRequest; params: PostPublicContactParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postPublicContact>>,
  TError,
  { data: ContactRequest; params: PostPublicContactParams },
  TContext
> => {
  const mutationOptions = getPostPublicContactMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postSectionHero = (
  postSectionHeroBody: PostSectionHeroBody,
  params: PostSectionHeroParams,
  signal?: AbortSignal,
) => {
  const formData = new FormData();
  if (postSectionHeroBody.Image !== undefined) {
    formData.append("Image", postSectionHeroBody.Image);
  }
  if (postSectionHeroBody.removedAssets !== undefined) {
    postSectionHeroBody.removedAssets.forEach((value) =>
      formData.append("removedAssets", value),
    );
  }
  if (postSectionHeroBody.OrderUrl !== undefined) {
    formData.append("OrderUrl", postSectionHeroBody.OrderUrl);
  }

  return authorizedFetch<void>({
    url: `/Section/hero`,
    method: "POST",
    headers: { "Content-Type": "multipart/form-data" },
    data: formData,
    params,
    signal,
  });
};

export const getPostSectionHeroMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postSectionHero>>,
    TError,
    { data: PostSectionHeroBody; params: PostSectionHeroParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postSectionHero>>,
  TError,
  { data: PostSectionHeroBody; params: PostSectionHeroParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postSectionHero>>,
    { data: PostSectionHeroBody; params: PostSectionHeroParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return postSectionHero(data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostSectionHeroMutationResult = NonNullable<
  Awaited<ReturnType<typeof postSectionHero>>
>;
export type PostSectionHeroMutationBody = PostSectionHeroBody;
export type PostSectionHeroMutationError = unknown;

export const usePostSectionHero = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postSectionHero>>,
    TError,
    { data: PostSectionHeroBody; params: PostSectionHeroParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postSectionHero>>,
  TError,
  { data: PostSectionHeroBody; params: PostSectionHeroParams },
  TContext
> => {
  const mutationOptions = getPostSectionHeroMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postSectionAbout = (
  postSectionAboutBody: PostSectionAboutBody,
  params: PostSectionAboutParams,
  signal?: AbortSignal,
) => {
  const formData = new FormData();
  if (postSectionAboutBody.Image !== undefined) {
    formData.append("Image", postSectionAboutBody.Image);
  }
  if (postSectionAboutBody.removedAssets !== undefined) {
    postSectionAboutBody.removedAssets.forEach((value) =>
      formData.append("removedAssets", value),
    );
  }
  if (postSectionAboutBody.Description !== undefined) {
    formData.append("Description", postSectionAboutBody.Description);
  }

  return authorizedFetch<void>({
    url: `/Section/about`,
    method: "POST",
    headers: { "Content-Type": "multipart/form-data" },
    data: formData,
    params,
    signal,
  });
};

export const getPostSectionAboutMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postSectionAbout>>,
    TError,
    { data: PostSectionAboutBody; params: PostSectionAboutParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postSectionAbout>>,
  TError,
  { data: PostSectionAboutBody; params: PostSectionAboutParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postSectionAbout>>,
    { data: PostSectionAboutBody; params: PostSectionAboutParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return postSectionAbout(data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostSectionAboutMutationResult = NonNullable<
  Awaited<ReturnType<typeof postSectionAbout>>
>;
export type PostSectionAboutMutationBody = PostSectionAboutBody;
export type PostSectionAboutMutationError = unknown;

export const usePostSectionAbout = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postSectionAbout>>,
    TError,
    { data: PostSectionAboutBody; params: PostSectionAboutParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postSectionAbout>>,
  TError,
  { data: PostSectionAboutBody; params: PostSectionAboutParams },
  TContext
> => {
  const mutationOptions = getPostSectionAboutMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postSectionGallery = (
  postSectionGalleryBody: PostSectionGalleryBody,
  params: PostSectionGalleryParams,
  signal?: AbortSignal,
) => {
  const formData = new FormData();
  if (postSectionGalleryBody.Images !== undefined) {
    postSectionGalleryBody.Images.forEach((value) =>
      formData.append("Images", value),
    );
  }

  return authorizedFetch<void>({
    url: `/Section/gallery`,
    method: "POST",
    headers: { "Content-Type": "multipart/form-data" },
    data: formData,
    params,
    signal,
  });
};

export const getPostSectionGalleryMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postSectionGallery>>,
    TError,
    { data: PostSectionGalleryBody; params: PostSectionGalleryParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postSectionGallery>>,
  TError,
  { data: PostSectionGalleryBody; params: PostSectionGalleryParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postSectionGallery>>,
    { data: PostSectionGalleryBody; params: PostSectionGalleryParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return postSectionGallery(data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostSectionGalleryMutationResult = NonNullable<
  Awaited<ReturnType<typeof postSectionGallery>>
>;
export type PostSectionGalleryMutationBody = PostSectionGalleryBody;
export type PostSectionGalleryMutationError = unknown;

export const usePostSectionGallery = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postSectionGallery>>,
    TError,
    { data: PostSectionGalleryBody; params: PostSectionGalleryParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postSectionGallery>>,
  TError,
  { data: PostSectionGalleryBody; params: PostSectionGalleryParams },
  TContext
> => {
  const mutationOptions = getPostSectionGalleryMutationOptions(options);

  return useMutation(mutationOptions);
};

export const deleteSectionGallery = (params: DeleteSectionGalleryParams) => {
  return authorizedFetch<void>({
    url: `/Section/gallery`,
    method: "DELETE",
    params,
  });
};

export const getDeleteSectionGalleryMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteSectionGallery>>,
    TError,
    { params: DeleteSectionGalleryParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteSectionGallery>>,
  TError,
  { params: DeleteSectionGalleryParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteSectionGallery>>,
    { params: DeleteSectionGalleryParams }
  > = (props) => {
    const { params } = props ?? {};

    return deleteSectionGallery(params);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteSectionGalleryMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteSectionGallery>>
>;

export type DeleteSectionGalleryMutationError = unknown;

export const useDeleteSectionGallery = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteSectionGallery>>,
    TError,
    { params: DeleteSectionGalleryParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteSectionGallery>>,
  TError,
  { params: DeleteSectionGalleryParams },
  TContext
> => {
  const mutationOptions = getDeleteSectionGalleryMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postWebhook = (signal?: AbortSignal) => {
  return authorizedFetch<void>({ url: `/webhook`, method: "POST", signal });
};

export const getPostWebhookMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postWebhook>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postWebhook>>,
  TError,
  void,
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postWebhook>>,
    void
  > = () => {
    return postWebhook();
  };

  return { mutationFn, ...mutationOptions };
};

export type PostWebhookMutationResult = NonNullable<
  Awaited<ReturnType<typeof postWebhook>>
>;

export type PostWebhookMutationError = unknown;

export const usePostWebhook = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postWebhook>>,
    TError,
    void,
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postWebhook>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getPostWebhookMutationOptions(options);

  return useMutation(mutationOptions);
};
