/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * backend
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import { authorizedFetch } from "../authorized-fetch";
export type GetPublicGetCustomerMenuParams = {
  key?: string;
};

export type GetPublicGetCustomerConfigParams = {
  key?: string;
};

export type PostMenuImportqoplamenuParams = {
  url?: string;
};

export type PostMenuCategoryOrderParams = {
  key?: string;
};

export type DeleteMenuCategoryParams = {
  id?: number;
  key?: string;
};

export type PostMenuCategoryParams = {
  key?: string;
};

export type PostMenuItemsBody = {
  files?: Blob[];
  menuItemsJson?: string;
};

export type PostMenuItemsParams = {
  key?: string;
};

export type PostCustomerUploadHeroBody = {
  Image?: Blob;
  OrderUrl?: string;
  removedAssets?: string[];
};

export type PostCustomerUploadHeroParams = {
  key?: string;
};

export type PostCustomerUploadSiteConfigurationAssetsBody = {
  Font?: Blob;
  Logo?: Blob;
};

export type PostCustomerUploadSiteConfigurationAssetsParams = {
  key?: string;
};

export type PostCustomerUploadSiteConfigurationBody = {
  Adress?: string;
  Email?: string;
  Font?: string;
  Logo?: string;
  Phone?: string;
  SiteMetaTitle?: string;
  SiteName?: string;
  Theme?: string;
};

export type PostCustomerUploadSiteConfigurationParams = {
  key?: string;
};

export type SubscriptionState =
  (typeof SubscriptionState)[keyof typeof SubscriptionState];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SubscriptionState = {
  NUMBER_0: 0,
  NUMBER_1: 1,
} as const;

export interface SiteSectionHeroResponse {
  heroImage?: string;
  orderUrl?: string;
}

export interface SectionsResponse {
  hero?: SiteSectionHeroResponse;
}

export interface MenuItemResponse {
  categoryId: number;
  /** @minLength 1 */
  description: string;
  id: number;
  /** @nullable */
  image?: string | null;
  /** @minLength 1 */
  name: string;
  price: number;
  /** @nullable */
  tags?: string | null;
}

export interface MenuCategoryResponse {
  id: number;
  /** @minLength 1 */
  name: string;
  order: number;
}

export interface MenuResponse {
  categories: MenuCategoryResponse[];
  menuItems: MenuItemResponse[];
}

export interface CustomerConfigResponse {
  /** @nullable */
  adress?: string | null;
  domain?: string;
  /** @nullable */
  email?: string | null;
  /** @nullable */
  font?: string | null;
  heroType?: number;
  logo?: string;
  /** @nullable */
  phone?: string | null;
  sections?: SectionsResponse;
  siteMetaTitle?: string;
  siteName?: string;
  theme?: string;
}

export interface CreateConfigRequest {
  domain?: string;
}

export interface CancelInfo {
  isCanceled?: boolean;
  isExpired?: boolean;
  /** @nullable */
  periodEnd?: string | null;
}

export interface CustomerResponse {
  cancelInfo?: CancelInfo;
  customerConfigs?: CustomerConfigResponse[];
  domain?: string;
  subscription?: SubscriptionState;
}

export interface AddCategoryRequest {
  id?: number;
  name?: string;
  /** @nullable */
  order?: number | null;
}

export const getCustomerGetCustomer = (signal?: AbortSignal) => {
  return authorizedFetch<CustomerResponse>({
    url: `/Customer/get-customer`,
    method: "GET",
    signal,
  });
};

export const getGetCustomerGetCustomerQueryKey = () => {
  return [`/Customer/get-customer`] as const;
};

export const getGetCustomerGetCustomerQueryOptions = <
  TData = Awaited<ReturnType<typeof getCustomerGetCustomer>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getCustomerGetCustomer>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetCustomerGetCustomerQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getCustomerGetCustomer>>
  > = ({ signal }) => getCustomerGetCustomer(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCustomerGetCustomer>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetCustomerGetCustomerQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCustomerGetCustomer>>
>;
export type GetCustomerGetCustomerQueryError = unknown;

export function useGetCustomerGetCustomer<
  TData = Awaited<ReturnType<typeof getCustomerGetCustomer>>,
  TError = unknown,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getCustomerGetCustomer>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getCustomerGetCustomer>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetCustomerGetCustomer<
  TData = Awaited<ReturnType<typeof getCustomerGetCustomer>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getCustomerGetCustomer>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getCustomerGetCustomer>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetCustomerGetCustomer<
  TData = Awaited<ReturnType<typeof getCustomerGetCustomer>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getCustomerGetCustomer>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetCustomerGetCustomer<
  TData = Awaited<ReturnType<typeof getCustomerGetCustomer>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getCustomerGetCustomer>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetCustomerGetCustomerQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const putCustomerCreateConfig = (
  createConfigRequest: CreateConfigRequest,
) => {
  return authorizedFetch<void>({
    url: `/Customer/create-config`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: createConfigRequest,
  });
};

export const getPutCustomerCreateConfigMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putCustomerCreateConfig>>,
    TError,
    { data: CreateConfigRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putCustomerCreateConfig>>,
  TError,
  { data: CreateConfigRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putCustomerCreateConfig>>,
    { data: CreateConfigRequest }
  > = (props) => {
    const { data } = props ?? {};

    return putCustomerCreateConfig(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutCustomerCreateConfigMutationResult = NonNullable<
  Awaited<ReturnType<typeof putCustomerCreateConfig>>
>;
export type PutCustomerCreateConfigMutationBody = CreateConfigRequest;
export type PutCustomerCreateConfigMutationError = unknown;

export const usePutCustomerCreateConfig = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putCustomerCreateConfig>>,
    TError,
    { data: CreateConfigRequest },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putCustomerCreateConfig>>,
  TError,
  { data: CreateConfigRequest },
  TContext
> => {
  const mutationOptions = getPutCustomerCreateConfigMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postCustomerUploadSiteConfiguration = (
  postCustomerUploadSiteConfigurationBody: PostCustomerUploadSiteConfigurationBody,
  params?: PostCustomerUploadSiteConfigurationParams,
  signal?: AbortSignal,
) => {
  const formData = new FormData();
  if (postCustomerUploadSiteConfigurationBody.SiteName !== undefined) {
    formData.append(
      "SiteName",
      postCustomerUploadSiteConfigurationBody.SiteName,
    );
  }
  if (postCustomerUploadSiteConfigurationBody.SiteMetaTitle !== undefined) {
    formData.append(
      "SiteMetaTitle",
      postCustomerUploadSiteConfigurationBody.SiteMetaTitle,
    );
  }
  if (postCustomerUploadSiteConfigurationBody.Theme !== undefined) {
    formData.append("Theme", postCustomerUploadSiteConfigurationBody.Theme);
  }
  if (postCustomerUploadSiteConfigurationBody.Logo !== undefined) {
    formData.append("Logo", postCustomerUploadSiteConfigurationBody.Logo);
  }
  if (postCustomerUploadSiteConfigurationBody.Font !== undefined) {
    formData.append("Font", postCustomerUploadSiteConfigurationBody.Font);
  }
  if (postCustomerUploadSiteConfigurationBody.Adress !== undefined) {
    formData.append("Adress", postCustomerUploadSiteConfigurationBody.Adress);
  }
  if (postCustomerUploadSiteConfigurationBody.Phone !== undefined) {
    formData.append("Phone", postCustomerUploadSiteConfigurationBody.Phone);
  }
  if (postCustomerUploadSiteConfigurationBody.Email !== undefined) {
    formData.append("Email", postCustomerUploadSiteConfigurationBody.Email);
  }

  return authorizedFetch<void>({
    url: `/Customer/upload-site-configuration`,
    method: "POST",
    headers: { "Content-Type": "multipart/form-data" },
    data: formData,
    params,
    signal,
  });
};

export const getPostCustomerUploadSiteConfigurationMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postCustomerUploadSiteConfiguration>>,
    TError,
    {
      data: PostCustomerUploadSiteConfigurationBody;
      params?: PostCustomerUploadSiteConfigurationParams;
    },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postCustomerUploadSiteConfiguration>>,
  TError,
  {
    data: PostCustomerUploadSiteConfigurationBody;
    params?: PostCustomerUploadSiteConfigurationParams;
  },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postCustomerUploadSiteConfiguration>>,
    {
      data: PostCustomerUploadSiteConfigurationBody;
      params?: PostCustomerUploadSiteConfigurationParams;
    }
  > = (props) => {
    const { data, params } = props ?? {};

    return postCustomerUploadSiteConfiguration(data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostCustomerUploadSiteConfigurationMutationResult = NonNullable<
  Awaited<ReturnType<typeof postCustomerUploadSiteConfiguration>>
>;
export type PostCustomerUploadSiteConfigurationMutationBody =
  PostCustomerUploadSiteConfigurationBody;
export type PostCustomerUploadSiteConfigurationMutationError = unknown;

export const usePostCustomerUploadSiteConfiguration = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postCustomerUploadSiteConfiguration>>,
    TError,
    {
      data: PostCustomerUploadSiteConfigurationBody;
      params?: PostCustomerUploadSiteConfigurationParams;
    },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postCustomerUploadSiteConfiguration>>,
  TError,
  {
    data: PostCustomerUploadSiteConfigurationBody;
    params?: PostCustomerUploadSiteConfigurationParams;
  },
  TContext
> => {
  const mutationOptions =
    getPostCustomerUploadSiteConfigurationMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postCustomerUploadSiteConfigurationAssets = (
  postCustomerUploadSiteConfigurationAssetsBody: PostCustomerUploadSiteConfigurationAssetsBody,
  params?: PostCustomerUploadSiteConfigurationAssetsParams,
  signal?: AbortSignal,
) => {
  const formData = new FormData();
  if (postCustomerUploadSiteConfigurationAssetsBody.Logo !== undefined) {
    formData.append("Logo", postCustomerUploadSiteConfigurationAssetsBody.Logo);
  }
  if (postCustomerUploadSiteConfigurationAssetsBody.Font !== undefined) {
    formData.append("Font", postCustomerUploadSiteConfigurationAssetsBody.Font);
  }

  return authorizedFetch<void>({
    url: `/Customer/upload-site-configuration-assets`,
    method: "POST",
    headers: { "Content-Type": "multipart/form-data" },
    data: formData,
    params,
    signal,
  });
};

export const getPostCustomerUploadSiteConfigurationAssetsMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postCustomerUploadSiteConfigurationAssets>>,
    TError,
    {
      data: PostCustomerUploadSiteConfigurationAssetsBody;
      params?: PostCustomerUploadSiteConfigurationAssetsParams;
    },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postCustomerUploadSiteConfigurationAssets>>,
  TError,
  {
    data: PostCustomerUploadSiteConfigurationAssetsBody;
    params?: PostCustomerUploadSiteConfigurationAssetsParams;
  },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postCustomerUploadSiteConfigurationAssets>>,
    {
      data: PostCustomerUploadSiteConfigurationAssetsBody;
      params?: PostCustomerUploadSiteConfigurationAssetsParams;
    }
  > = (props) => {
    const { data, params } = props ?? {};

    return postCustomerUploadSiteConfigurationAssets(data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostCustomerUploadSiteConfigurationAssetsMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof postCustomerUploadSiteConfigurationAssets>>
  >;
export type PostCustomerUploadSiteConfigurationAssetsMutationBody =
  PostCustomerUploadSiteConfigurationAssetsBody;
export type PostCustomerUploadSiteConfigurationAssetsMutationError = unknown;

export const usePostCustomerUploadSiteConfigurationAssets = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postCustomerUploadSiteConfigurationAssets>>,
    TError,
    {
      data: PostCustomerUploadSiteConfigurationAssetsBody;
      params?: PostCustomerUploadSiteConfigurationAssetsParams;
    },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postCustomerUploadSiteConfigurationAssets>>,
  TError,
  {
    data: PostCustomerUploadSiteConfigurationAssetsBody;
    params?: PostCustomerUploadSiteConfigurationAssetsParams;
  },
  TContext
> => {
  const mutationOptions =
    getPostCustomerUploadSiteConfigurationAssetsMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postCustomerUploadHero = (
  postCustomerUploadHeroBody: PostCustomerUploadHeroBody,
  params?: PostCustomerUploadHeroParams,
  signal?: AbortSignal,
) => {
  const formData = new FormData();
  if (postCustomerUploadHeroBody.Image !== undefined) {
    formData.append("Image", postCustomerUploadHeroBody.Image);
  }
  if (postCustomerUploadHeroBody.removedAssets !== undefined) {
    postCustomerUploadHeroBody.removedAssets.forEach((value) =>
      formData.append("removedAssets", value),
    );
  }
  if (postCustomerUploadHeroBody.OrderUrl !== undefined) {
    formData.append("OrderUrl", postCustomerUploadHeroBody.OrderUrl);
  }

  return authorizedFetch<void>({
    url: `/Customer/upload-hero`,
    method: "POST",
    headers: { "Content-Type": "multipart/form-data" },
    data: formData,
    params,
    signal,
  });
};

export const getPostCustomerUploadHeroMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postCustomerUploadHero>>,
    TError,
    { data: PostCustomerUploadHeroBody; params?: PostCustomerUploadHeroParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postCustomerUploadHero>>,
  TError,
  { data: PostCustomerUploadHeroBody; params?: PostCustomerUploadHeroParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postCustomerUploadHero>>,
    { data: PostCustomerUploadHeroBody; params?: PostCustomerUploadHeroParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return postCustomerUploadHero(data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostCustomerUploadHeroMutationResult = NonNullable<
  Awaited<ReturnType<typeof postCustomerUploadHero>>
>;
export type PostCustomerUploadHeroMutationBody = PostCustomerUploadHeroBody;
export type PostCustomerUploadHeroMutationError = unknown;

export const usePostCustomerUploadHero = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postCustomerUploadHero>>,
    TError,
    { data: PostCustomerUploadHeroBody; params?: PostCustomerUploadHeroParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postCustomerUploadHero>>,
  TError,
  { data: PostCustomerUploadHeroBody; params?: PostCustomerUploadHeroParams },
  TContext
> => {
  const mutationOptions = getPostCustomerUploadHeroMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postMenuItems = (
  postMenuItemsBody: PostMenuItemsBody,
  params?: PostMenuItemsParams,
  signal?: AbortSignal,
) => {
  const formData = new FormData();
  if (postMenuItemsBody.menuItemsJson !== undefined) {
    formData.append("menuItemsJson", postMenuItemsBody.menuItemsJson);
  }
  if (postMenuItemsBody.files !== undefined) {
    postMenuItemsBody.files.forEach((value) => formData.append("files", value));
  }

  return authorizedFetch<void>({
    url: `/Menu/items`,
    method: "POST",
    headers: { "Content-Type": "multipart/form-data" },
    data: formData,
    params,
    signal,
  });
};

export const getPostMenuItemsMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postMenuItems>>,
    TError,
    { data: PostMenuItemsBody; params?: PostMenuItemsParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postMenuItems>>,
  TError,
  { data: PostMenuItemsBody; params?: PostMenuItemsParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postMenuItems>>,
    { data: PostMenuItemsBody; params?: PostMenuItemsParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return postMenuItems(data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostMenuItemsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postMenuItems>>
>;
export type PostMenuItemsMutationBody = PostMenuItemsBody;
export type PostMenuItemsMutationError = unknown;

export const usePostMenuItems = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postMenuItems>>,
    TError,
    { data: PostMenuItemsBody; params?: PostMenuItemsParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postMenuItems>>,
  TError,
  { data: PostMenuItemsBody; params?: PostMenuItemsParams },
  TContext
> => {
  const mutationOptions = getPostMenuItemsMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postMenuCategory = (
  addCategoryRequest: AddCategoryRequest,
  params?: PostMenuCategoryParams,
  signal?: AbortSignal,
) => {
  return authorizedFetch<void>({
    url: `/Menu/category`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: addCategoryRequest,
    params,
    signal,
  });
};

export const getPostMenuCategoryMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postMenuCategory>>,
    TError,
    { data: AddCategoryRequest; params?: PostMenuCategoryParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postMenuCategory>>,
  TError,
  { data: AddCategoryRequest; params?: PostMenuCategoryParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postMenuCategory>>,
    { data: AddCategoryRequest; params?: PostMenuCategoryParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return postMenuCategory(data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostMenuCategoryMutationResult = NonNullable<
  Awaited<ReturnType<typeof postMenuCategory>>
>;
export type PostMenuCategoryMutationBody = AddCategoryRequest;
export type PostMenuCategoryMutationError = unknown;

export const usePostMenuCategory = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postMenuCategory>>,
    TError,
    { data: AddCategoryRequest; params?: PostMenuCategoryParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postMenuCategory>>,
  TError,
  { data: AddCategoryRequest; params?: PostMenuCategoryParams },
  TContext
> => {
  const mutationOptions = getPostMenuCategoryMutationOptions(options);

  return useMutation(mutationOptions);
};

export const deleteMenuCategory = (params?: DeleteMenuCategoryParams) => {
  return authorizedFetch<void>({
    url: `/Menu/category`,
    method: "DELETE",
    params,
  });
};

export const getDeleteMenuCategoryMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteMenuCategory>>,
    TError,
    { params?: DeleteMenuCategoryParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteMenuCategory>>,
  TError,
  { params?: DeleteMenuCategoryParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteMenuCategory>>,
    { params?: DeleteMenuCategoryParams }
  > = (props) => {
    const { params } = props ?? {};

    return deleteMenuCategory(params);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteMenuCategoryMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteMenuCategory>>
>;

export type DeleteMenuCategoryMutationError = unknown;

export const useDeleteMenuCategory = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteMenuCategory>>,
    TError,
    { params?: DeleteMenuCategoryParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteMenuCategory>>,
  TError,
  { params?: DeleteMenuCategoryParams },
  TContext
> => {
  const mutationOptions = getDeleteMenuCategoryMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postMenuCategoryOrder = (
  addCategoryRequest: AddCategoryRequest[],
  params?: PostMenuCategoryOrderParams,
  signal?: AbortSignal,
) => {
  return authorizedFetch<void>({
    url: `/Menu/category/order`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: addCategoryRequest,
    params,
    signal,
  });
};

export const getPostMenuCategoryOrderMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postMenuCategoryOrder>>,
    TError,
    { data: AddCategoryRequest[]; params?: PostMenuCategoryOrderParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postMenuCategoryOrder>>,
  TError,
  { data: AddCategoryRequest[]; params?: PostMenuCategoryOrderParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postMenuCategoryOrder>>,
    { data: AddCategoryRequest[]; params?: PostMenuCategoryOrderParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return postMenuCategoryOrder(data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostMenuCategoryOrderMutationResult = NonNullable<
  Awaited<ReturnType<typeof postMenuCategoryOrder>>
>;
export type PostMenuCategoryOrderMutationBody = AddCategoryRequest[];
export type PostMenuCategoryOrderMutationError = unknown;

export const usePostMenuCategoryOrder = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postMenuCategoryOrder>>,
    TError,
    { data: AddCategoryRequest[]; params?: PostMenuCategoryOrderParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postMenuCategoryOrder>>,
  TError,
  { data: AddCategoryRequest[]; params?: PostMenuCategoryOrderParams },
  TContext
> => {
  const mutationOptions = getPostMenuCategoryOrderMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postMenuImportqoplamenu = (
  params?: PostMenuImportqoplamenuParams,
  signal?: AbortSignal,
) => {
  return authorizedFetch<void>({
    url: `/Menu/importqoplamenu`,
    method: "POST",
    params,
    signal,
  });
};

export const getPostMenuImportqoplamenuMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postMenuImportqoplamenu>>,
    TError,
    { params?: PostMenuImportqoplamenuParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postMenuImportqoplamenu>>,
  TError,
  { params?: PostMenuImportqoplamenuParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postMenuImportqoplamenu>>,
    { params?: PostMenuImportqoplamenuParams }
  > = (props) => {
    const { params } = props ?? {};

    return postMenuImportqoplamenu(params);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostMenuImportqoplamenuMutationResult = NonNullable<
  Awaited<ReturnType<typeof postMenuImportqoplamenu>>
>;

export type PostMenuImportqoplamenuMutationError = unknown;

export const usePostMenuImportqoplamenu = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postMenuImportqoplamenu>>,
    TError,
    { params?: PostMenuImportqoplamenuParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postMenuImportqoplamenu>>,
  TError,
  { params?: PostMenuImportqoplamenuParams },
  TContext
> => {
  const mutationOptions = getPostMenuImportqoplamenuMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getPublicGetCustomerConfig = (
  params?: GetPublicGetCustomerConfigParams,
  signal?: AbortSignal,
) => {
  return authorizedFetch<CustomerConfigResponse>({
    url: `/Public/get-customer-config`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetPublicGetCustomerConfigQueryKey = (
  params?: GetPublicGetCustomerConfigParams,
) => {
  return [`/Public/get-customer-config`, ...(params ? [params] : [])] as const;
};

export const getGetPublicGetCustomerConfigQueryOptions = <
  TData = Awaited<ReturnType<typeof getPublicGetCustomerConfig>>,
  TError = unknown,
>(
  params?: GetPublicGetCustomerConfigParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPublicGetCustomerConfig>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetPublicGetCustomerConfigQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getPublicGetCustomerConfig>>
  > = ({ signal }) => getPublicGetCustomerConfig(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPublicGetCustomerConfig>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetPublicGetCustomerConfigQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPublicGetCustomerConfig>>
>;
export type GetPublicGetCustomerConfigQueryError = unknown;

export function useGetPublicGetCustomerConfig<
  TData = Awaited<ReturnType<typeof getPublicGetCustomerConfig>>,
  TError = unknown,
>(
  params: undefined | GetPublicGetCustomerConfigParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPublicGetCustomerConfig>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPublicGetCustomerConfig>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetPublicGetCustomerConfig<
  TData = Awaited<ReturnType<typeof getPublicGetCustomerConfig>>,
  TError = unknown,
>(
  params?: GetPublicGetCustomerConfigParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPublicGetCustomerConfig>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPublicGetCustomerConfig>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetPublicGetCustomerConfig<
  TData = Awaited<ReturnType<typeof getPublicGetCustomerConfig>>,
  TError = unknown,
>(
  params?: GetPublicGetCustomerConfigParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPublicGetCustomerConfig>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetPublicGetCustomerConfig<
  TData = Awaited<ReturnType<typeof getPublicGetCustomerConfig>>,
  TError = unknown,
>(
  params?: GetPublicGetCustomerConfigParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPublicGetCustomerConfig>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetPublicGetCustomerConfigQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getPublicGetCustomerMenu = (
  params?: GetPublicGetCustomerMenuParams,
  signal?: AbortSignal,
) => {
  return authorizedFetch<MenuResponse>({
    url: `/Public/get-customer-menu`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetPublicGetCustomerMenuQueryKey = (
  params?: GetPublicGetCustomerMenuParams,
) => {
  return [`/Public/get-customer-menu`, ...(params ? [params] : [])] as const;
};

export const getGetPublicGetCustomerMenuQueryOptions = <
  TData = Awaited<ReturnType<typeof getPublicGetCustomerMenu>>,
  TError = unknown,
>(
  params?: GetPublicGetCustomerMenuParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPublicGetCustomerMenu>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetPublicGetCustomerMenuQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getPublicGetCustomerMenu>>
  > = ({ signal }) => getPublicGetCustomerMenu(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPublicGetCustomerMenu>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetPublicGetCustomerMenuQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPublicGetCustomerMenu>>
>;
export type GetPublicGetCustomerMenuQueryError = unknown;

export function useGetPublicGetCustomerMenu<
  TData = Awaited<ReturnType<typeof getPublicGetCustomerMenu>>,
  TError = unknown,
>(
  params: undefined | GetPublicGetCustomerMenuParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPublicGetCustomerMenu>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPublicGetCustomerMenu>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetPublicGetCustomerMenu<
  TData = Awaited<ReturnType<typeof getPublicGetCustomerMenu>>,
  TError = unknown,
>(
  params?: GetPublicGetCustomerMenuParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPublicGetCustomerMenu>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPublicGetCustomerMenu>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetPublicGetCustomerMenu<
  TData = Awaited<ReturnType<typeof getPublicGetCustomerMenu>>,
  TError = unknown,
>(
  params?: GetPublicGetCustomerMenuParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPublicGetCustomerMenu>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetPublicGetCustomerMenu<
  TData = Awaited<ReturnType<typeof getPublicGetCustomerMenu>>,
  TError = unknown,
>(
  params?: GetPublicGetCustomerMenuParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPublicGetCustomerMenu>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetPublicGetCustomerMenuQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postWebhook = (signal?: AbortSignal) => {
  return authorizedFetch<void>({ url: `/webhook`, method: "POST", signal });
};

export const getPostWebhookMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postWebhook>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postWebhook>>,
  TError,
  void,
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postWebhook>>,
    void
  > = () => {
    return postWebhook();
  };

  return { mutationFn, ...mutationOptions };
};

export type PostWebhookMutationResult = NonNullable<
  Awaited<ReturnType<typeof postWebhook>>
>;

export type PostWebhookMutationError = unknown;

export const usePostWebhook = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postWebhook>>,
    TError,
    void,
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postWebhook>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getPostWebhookMutationOptions(options);

  return useMutation(mutationOptions);
};
