/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * backend
 * OpenAPI spec version: 1.0
 */
import { authorizedFetch } from "../authorized-fetch";
export type GetPublicGetCustomerMenuParams = {
  key?: string;
};

export type GetPublicGetCustomerConfigParams = {
  key?: string;
};

export type PostMenuCategoryOrderParams = {
  key?: string;
};

export type DeleteMenuCategoryParams = {
  id?: number;
  key?: string;
};

export type PostMenuCategoryParams = {
  key?: string;
};

export type PostMenuItemsBody = {
  files?: Blob[];
  menuItemsJson?: string;
};

export type PostMenuItemsParams = {
  key?: string;
};

export type PostCustomerUploadHeroBody = {
  Image?: Blob;
  OrderUrl?: string;
  removedAssets?: string[];
};

export type PostCustomerUploadHeroParams = {
  key?: string;
};

export type PostCustomerUploadSiteConfigurationAssetsBody = {
  Font?: Blob;
  Logo?: Blob;
};

export type PostCustomerUploadSiteConfigurationAssetsParams = {
  key?: string;
};

export type PostCustomerUploadSiteConfigurationBody = {
  Adress?: string;
  Email?: string;
  Logo?: string;
  Phone?: string;
  SiteMetaTitle?: string;
  SiteName?: string;
  Theme?: string;
};

export type PostCustomerUploadSiteConfigurationParams = {
  key?: string;
};

export type SubscriptionState =
  (typeof SubscriptionState)[keyof typeof SubscriptionState];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SubscriptionState = {
  NUMBER_0: 0,
  NUMBER_1: 1,
} as const;

export interface SiteSectionHeroResponse {
  heroImage?: string;
  orderUrl?: string;
}

export interface SectionsResponse {
  hero?: SiteSectionHeroResponse;
}

export interface MenuItemResponse {
  categoryId: number;
  /** @minLength 1 */
  description: string;
  id: number;
  /** @nullable */
  image?: string | null;
  /** @minLength 1 */
  name: string;
  price: number;
  /** @nullable */
  tags?: string | null;
}

export interface MenuCategoryResponse {
  id: number;
  /** @minLength 1 */
  name: string;
  order: number;
}

export interface MenuResponse {
  categories: MenuCategoryResponse[];
  menuItems: MenuItemResponse[];
}

export interface CustomerConfigResponse {
  /** @nullable */
  adress?: string | null;
  domain?: string;
  /** @nullable */
  email?: string | null;
  /** @nullable */
  font?: string | null;
  heroType?: number;
  logo?: string;
  /** @nullable */
  phone?: string | null;
  sections?: SectionsResponse;
  siteMetaTitle?: string;
  siteName?: string;
  theme?: string;
}

export interface CustomerResponse {
  customerConfigs?: CustomerConfigResponse[];
  domain?: string;
  subscription?: SubscriptionState;
}

export interface CreateConfigRequest {
  domain?: string;
}

export interface AddCategoryRequest {
  id?: number;
  name?: string;
  /** @nullable */
  order?: number | null;
}

export const getCustomerGetCustomer = () => {
  return authorizedFetch<CustomerResponse>({
    url: `/Customer/get-customer`,
    method: "GET",
  });
};

export const putCustomerCreateConfig = (
  createConfigRequest: CreateConfigRequest,
) => {
  return authorizedFetch<void>({
    url: `/Customer/create-config`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: createConfigRequest,
  });
};

export const postCustomerUploadSiteConfiguration = (
  postCustomerUploadSiteConfigurationBody: PostCustomerUploadSiteConfigurationBody,
  params?: PostCustomerUploadSiteConfigurationParams,
) => {
  const formData = new FormData();
  if (postCustomerUploadSiteConfigurationBody.SiteName !== undefined) {
    formData.append(
      "SiteName",
      postCustomerUploadSiteConfigurationBody.SiteName,
    );
  }
  if (postCustomerUploadSiteConfigurationBody.SiteMetaTitle !== undefined) {
    formData.append(
      "SiteMetaTitle",
      postCustomerUploadSiteConfigurationBody.SiteMetaTitle,
    );
  }
  if (postCustomerUploadSiteConfigurationBody.Theme !== undefined) {
    formData.append("Theme", postCustomerUploadSiteConfigurationBody.Theme);
  }
  if (postCustomerUploadSiteConfigurationBody.Logo !== undefined) {
    formData.append("Logo", postCustomerUploadSiteConfigurationBody.Logo);
  }
  if (postCustomerUploadSiteConfigurationBody.Adress !== undefined) {
    formData.append("Adress", postCustomerUploadSiteConfigurationBody.Adress);
  }
  if (postCustomerUploadSiteConfigurationBody.Phone !== undefined) {
    formData.append("Phone", postCustomerUploadSiteConfigurationBody.Phone);
  }
  if (postCustomerUploadSiteConfigurationBody.Email !== undefined) {
    formData.append("Email", postCustomerUploadSiteConfigurationBody.Email);
  }

  return authorizedFetch<void>({
    url: `/Customer/upload-site-configuration`,
    method: "POST",
    headers: { "Content-Type": "multipart/form-data" },
    data: formData,
    params,
  });
};

export const postCustomerUploadSiteConfigurationAssets = (
  postCustomerUploadSiteConfigurationAssetsBody: PostCustomerUploadSiteConfigurationAssetsBody,
  params?: PostCustomerUploadSiteConfigurationAssetsParams,
) => {
  const formData = new FormData();
  if (postCustomerUploadSiteConfigurationAssetsBody.Logo !== undefined) {
    formData.append("Logo", postCustomerUploadSiteConfigurationAssetsBody.Logo);
  }
  if (postCustomerUploadSiteConfigurationAssetsBody.Font !== undefined) {
    formData.append("Font", postCustomerUploadSiteConfigurationAssetsBody.Font);
  }

  return authorizedFetch<void>({
    url: `/Customer/upload-site-configuration-assets`,
    method: "POST",
    headers: { "Content-Type": "multipart/form-data" },
    data: formData,
    params,
  });
};

export const postCustomerUploadHero = (
  postCustomerUploadHeroBody: PostCustomerUploadHeroBody,
  params?: PostCustomerUploadHeroParams,
) => {
  const formData = new FormData();
  if (postCustomerUploadHeroBody.Image !== undefined) {
    formData.append("Image", postCustomerUploadHeroBody.Image);
  }
  if (postCustomerUploadHeroBody.removedAssets !== undefined) {
    postCustomerUploadHeroBody.removedAssets.forEach((value) =>
      formData.append("removedAssets", value),
    );
  }
  if (postCustomerUploadHeroBody.OrderUrl !== undefined) {
    formData.append("OrderUrl", postCustomerUploadHeroBody.OrderUrl);
  }

  return authorizedFetch<void>({
    url: `/Customer/upload-hero`,
    method: "POST",
    headers: { "Content-Type": "multipart/form-data" },
    data: formData,
    params,
  });
};

export const postMenuItems = (
  postMenuItemsBody: PostMenuItemsBody,
  params?: PostMenuItemsParams,
) => {
  const formData = new FormData();
  if (postMenuItemsBody.menuItemsJson !== undefined) {
    formData.append("menuItemsJson", postMenuItemsBody.menuItemsJson);
  }
  if (postMenuItemsBody.files !== undefined) {
    postMenuItemsBody.files.forEach((value) => formData.append("files", value));
  }

  return authorizedFetch<void>({
    url: `/Menu/items`,
    method: "POST",
    headers: { "Content-Type": "multipart/form-data" },
    data: formData,
    params,
  });
};

export const postMenuCategory = (
  addCategoryRequest: AddCategoryRequest,
  params?: PostMenuCategoryParams,
) => {
  return authorizedFetch<void>({
    url: `/Menu/category`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: addCategoryRequest,
    params,
  });
};

export const deleteMenuCategory = (params?: DeleteMenuCategoryParams) => {
  return authorizedFetch<void>({
    url: `/Menu/category`,
    method: "DELETE",
    params,
  });
};

export const postMenuCategoryOrder = (
  addCategoryRequest: AddCategoryRequest[],
  params?: PostMenuCategoryOrderParams,
) => {
  return authorizedFetch<void>({
    url: `/Menu/category/order`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: addCategoryRequest,
    params,
  });
};

export const getPublicGetCustomerConfig = (
  params?: GetPublicGetCustomerConfigParams,
) => {
  return authorizedFetch<CustomerConfigResponse>({
    url: `/Public/get-customer-config`,
    method: "GET",
    params,
  });
};

export const getPublicGetCustomerMenu = (
  params?: GetPublicGetCustomerMenuParams,
) => {
  return authorizedFetch<MenuResponse>({
    url: `/Public/get-customer-menu`,
    method: "GET",
    params,
  });
};

export const postWebhook = () => {
  return authorizedFetch<void>({ url: `/webhook`, method: "POST" });
};

export type GetCustomerGetCustomerResult = NonNullable<
  Awaited<ReturnType<typeof getCustomerGetCustomer>>
>;
export type PutCustomerCreateConfigResult = NonNullable<
  Awaited<ReturnType<typeof putCustomerCreateConfig>>
>;
export type PostCustomerUploadSiteConfigurationResult = NonNullable<
  Awaited<ReturnType<typeof postCustomerUploadSiteConfiguration>>
>;
export type PostCustomerUploadSiteConfigurationAssetsResult = NonNullable<
  Awaited<ReturnType<typeof postCustomerUploadSiteConfigurationAssets>>
>;
export type PostCustomerUploadHeroResult = NonNullable<
  Awaited<ReturnType<typeof postCustomerUploadHero>>
>;
export type PostMenuItemsResult = NonNullable<
  Awaited<ReturnType<typeof postMenuItems>>
>;
export type PostMenuCategoryResult = NonNullable<
  Awaited<ReturnType<typeof postMenuCategory>>
>;
export type DeleteMenuCategoryResult = NonNullable<
  Awaited<ReturnType<typeof deleteMenuCategory>>
>;
export type PostMenuCategoryOrderResult = NonNullable<
  Awaited<ReturnType<typeof postMenuCategoryOrder>>
>;
export type GetPublicGetCustomerConfigResult = NonNullable<
  Awaited<ReturnType<typeof getPublicGetCustomerConfig>>
>;
export type GetPublicGetCustomerMenuResult = NonNullable<
  Awaited<ReturnType<typeof getPublicGetCustomerMenu>>
>;
export type PostWebhookResult = NonNullable<
  Awaited<ReturnType<typeof postWebhook>>
>;
