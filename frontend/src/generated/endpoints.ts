/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * backend
 * OpenAPI spec version: 1.0
 */
import axios from "axios";
import type { AxiosRequestConfig, AxiosResponse } from "axios";
export type PostCustomerUploadHeroBody = {
  Image?: Blob;
  OrderUrl?: string;
  removedAssets?: string[];
};

export type PostCustomerUploadHeroParams = {
  key?: string;
};

export type PostCustomerUploadSiteConfigurationAssetsBody = {
  Font?: Blob;
  Logo?: Blob;
};

export type PostCustomerUploadSiteConfigurationAssetsParams = {
  key?: string;
};

export type PostCustomerUploadSiteConfigurationBody = {
  Adress?: string;
  Email?: string;
  Logo?: string;
  Phone?: string;
  SiteMetaTitle?: string;
  SiteName?: string;
  Theme?: string;
};

export type PostCustomerUploadSiteConfigurationParams = {
  key?: string;
};

export type PostCustomerUploadCustomerMenuBody = {
  files?: Blob[];
  menuItemsJson?: string;
};

export type PostCustomerUploadCustomerMenuParams = {
  key?: string;
};

export type GetCustomerGetCustomerMenuParams = {
  key?: string;
};

export type GetCustomerGetCustomerConfigParams = {
  key?: string;
};

export interface SiteSectionHeroResponse {
  /** @nullable */
  heroImage?: string | null;
  /** @nullable */
  orderUrl?: string | null;
}

export interface SectionsResponse {
  hero?: SiteSectionHeroResponse;
}

export interface MenuResponse {
  /** @nullable */
  category?: string | null;
  /** @nullable */
  customerConfigDomain?: string | null;
  /** @nullable */
  description?: string | null;
  id?: number;
  /** @nullable */
  image?: string | null;
  /** @nullable */
  name?: string | null;
  price?: number;
  /** @nullable */
  tags?: string | null;
}

export interface CustomerResponse {
  /** @nullable */
  adress?: string | null;
  customerId?: number;
  /** @nullable */
  domain?: string | null;
  /** @nullable */
  email?: string | null;
  heroType?: number;
  /** @nullable */
  logo?: string | null;
  /** @nullable */
  phone?: string | null;
  /** @nullable */
  siteMetaTitle?: string | null;
  /** @nullable */
  siteName?: string | null;
  /** @nullable */
  theme?: string | null;
}

export interface CustomerConfigResponse {
  /** @nullable */
  adress?: string | null;
  /** @nullable */
  email?: string | null;
  /** @nullable */
  font?: string | null;
  heroType?: number;
  /** @nullable */
  logo?: string | null;
  /** @nullable */
  menuBackdropUrl?: string | null;
  /** @nullable */
  phone?: string | null;
  sections?: SectionsResponse;
  /** @nullable */
  siteMetaTitle?: string | null;
  /** @nullable */
  siteName?: string | null;
  /** @nullable */
  theme?: string | null;
}

export interface CreateConfigRequest {
  /** @nullable */
  domain?: string | null;
}

export const getCustomerGetCustomerConfig = <
  TData = AxiosResponse<CustomerConfigResponse>,
>(
  params?: GetCustomerGetCustomerConfigParams,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.get(`/Customer/get-customer-config`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getCustomerGetCustomerMenu = <
  TData = AxiosResponse<MenuResponse[]>,
>(
  params?: GetCustomerGetCustomerMenuParams,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.get(`/Customer/get-customer-menu`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getCustomerGetCustomer = <
  TData = AxiosResponse<CustomerResponse[]>,
>(
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.get(`/Customer/get-customer`, options);
};

export const putCustomerCreateConfig = <TData = AxiosResponse<void>>(
  createConfigRequest: CreateConfigRequest,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.put(`/Customer/create-config`, createConfigRequest, options);
};

export const postCustomerUploadCustomerMenu = <TData = AxiosResponse<void>>(
  postCustomerUploadCustomerMenuBody: PostCustomerUploadCustomerMenuBody,
  params?: PostCustomerUploadCustomerMenuParams,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  const formData = new FormData();
  if (postCustomerUploadCustomerMenuBody.menuItemsJson !== undefined) {
    formData.append(
      "menuItemsJson",
      postCustomerUploadCustomerMenuBody.menuItemsJson,
    );
  }
  if (postCustomerUploadCustomerMenuBody.files !== undefined) {
    postCustomerUploadCustomerMenuBody.files.forEach((value) =>
      formData.append("files", value),
    );
  }

  return axios.post(`/Customer/upload-customer-menu`, formData, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const postCustomerUploadSiteConfiguration = <
  TData = AxiosResponse<void>,
>(
  postCustomerUploadSiteConfigurationBody: PostCustomerUploadSiteConfigurationBody,
  params?: PostCustomerUploadSiteConfigurationParams,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  const formData = new FormData();
  if (postCustomerUploadSiteConfigurationBody.SiteName !== undefined) {
    formData.append(
      "SiteName",
      postCustomerUploadSiteConfigurationBody.SiteName,
    );
  }
  if (postCustomerUploadSiteConfigurationBody.SiteMetaTitle !== undefined) {
    formData.append(
      "SiteMetaTitle",
      postCustomerUploadSiteConfigurationBody.SiteMetaTitle,
    );
  }
  if (postCustomerUploadSiteConfigurationBody.Theme !== undefined) {
    formData.append("Theme", postCustomerUploadSiteConfigurationBody.Theme);
  }
  if (postCustomerUploadSiteConfigurationBody.Logo !== undefined) {
    formData.append("Logo", postCustomerUploadSiteConfigurationBody.Logo);
  }
  if (postCustomerUploadSiteConfigurationBody.Adress !== undefined) {
    formData.append("Adress", postCustomerUploadSiteConfigurationBody.Adress);
  }
  if (postCustomerUploadSiteConfigurationBody.Phone !== undefined) {
    formData.append("Phone", postCustomerUploadSiteConfigurationBody.Phone);
  }
  if (postCustomerUploadSiteConfigurationBody.Email !== undefined) {
    formData.append("Email", postCustomerUploadSiteConfigurationBody.Email);
  }

  return axios.post(`/Customer/upload-site-configuration`, formData, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const postCustomerUploadSiteConfigurationAssets = <
  TData = AxiosResponse<void>,
>(
  postCustomerUploadSiteConfigurationAssetsBody: PostCustomerUploadSiteConfigurationAssetsBody,
  params?: PostCustomerUploadSiteConfigurationAssetsParams,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  const formData = new FormData();
  if (postCustomerUploadSiteConfigurationAssetsBody.Logo !== undefined) {
    formData.append("Logo", postCustomerUploadSiteConfigurationAssetsBody.Logo);
  }
  if (postCustomerUploadSiteConfigurationAssetsBody.Font !== undefined) {
    formData.append("Font", postCustomerUploadSiteConfigurationAssetsBody.Font);
  }

  return axios.post(`/Customer/upload-site-configuration-assets`, formData, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const postCustomerUploadHero = <TData = AxiosResponse<void>>(
  postCustomerUploadHeroBody: PostCustomerUploadHeroBody,
  params?: PostCustomerUploadHeroParams,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  const formData = new FormData();
  if (postCustomerUploadHeroBody.Image !== undefined) {
    formData.append("Image", postCustomerUploadHeroBody.Image);
  }
  if (postCustomerUploadHeroBody.removedAssets !== undefined) {
    postCustomerUploadHeroBody.removedAssets.forEach((value) =>
      formData.append("removedAssets", value),
    );
  }
  if (postCustomerUploadHeroBody.OrderUrl !== undefined) {
    formData.append("OrderUrl", postCustomerUploadHeroBody.OrderUrl);
  }

  return axios.post(`/Customer/upload-hero`, formData, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export type GetCustomerGetCustomerConfigResult =
  AxiosResponse<CustomerConfigResponse>;
export type GetCustomerGetCustomerMenuResult = AxiosResponse<MenuResponse[]>;
export type GetCustomerGetCustomerResult = AxiosResponse<CustomerResponse[]>;
export type PutCustomerCreateConfigResult = AxiosResponse<void>;
export type PostCustomerUploadCustomerMenuResult = AxiosResponse<void>;
export type PostCustomerUploadSiteConfigurationResult = AxiosResponse<void>;
export type PostCustomerUploadSiteConfigurationAssetsResult =
  AxiosResponse<void>;
export type PostCustomerUploadHeroResult = AxiosResponse<void>;
